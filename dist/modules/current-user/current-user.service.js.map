{"version":3,"sources":["../../../src/modules/current-user/current-user.service.ts"],"sourcesContent":["import { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\n\nimport { MESSAGES } from \"@/constants\";\nimport { SysMenuEntity, SysUserEntity } from \"@/database\";\nimport { IUserMenu } from \"@/interfaces\";\nimport { ContextService } from \"@/shared\";\nimport { HashUtil, ProxyUtil } from \"@/utils\";\n\nimport {\n  UpdateCurrentUserBaseDTO,\n  UpdateCurrentUserPasswordDTO,\n} from \"./current-user.dto\";\n\n@Injectable()\nexport class CurrentUserService {\n  constructor(\n    @InjectRepository(SysUserEntity)\n    private userModel: Repository<SysUserEntity>,\n    @InjectRepository(SysMenuEntity)\n    private menuModel: Repository<SysMenuEntity>,\n    private contextService: ContextService,\n  ) {}\n\n  async handleGetInfo() {\n    const { roles, permissions, user } =\n      this.contextService.getUserWithPermission();\n\n    const result = {\n      // menus: [] as IUserMenu[],\n      roles: [] as string[],\n      permissions,\n      user,\n    };\n\n    if (roles?.length) {\n      result.roles = roles.map((v) => v.roleKey);\n\n      // if (user.id === \"1\") {\n      //   const menus = await this.menuModel.find();\n      //   result.menus = await this.transformMenus(menus);\n      // } else {\n      //   const menus = new Map();\n\n      //   for (const role of roles) {\n      //     if (role.menus?.length) {\n      //       for (const menu of role.menus) {\n      //         menus.set(menu.id, menu);\n      //       }\n      //     }\n      //   }\n\n      //   result.menus = await this.transformMenus(Object.values(menus));\n      // }\n    }\n\n    return result;\n  }\n\n  async handleGetProfile() {\n    const { userName } = this.contextService.getPayload();\n\n    const { roles, dept, posts, ...rest } = await this.userModel.findOne({\n      relations: {\n        roles: true,\n        dept: true,\n        posts: true,\n      },\n      where: { userName },\n    });\n\n    const result = {\n      ...rest,\n      postGroup: posts.map((v) => v.postName).join(\",\"),\n      roleGroup: roles.map((v) => v.roleName).join(\",\"),\n      deptName: dept.deptName,\n    };\n\n    return result;\n  }\n\n  async handleUpdateBase(dto: UpdateCurrentUserBaseDTO) {\n    const { userId, userName } = this.contextService.getPayload();\n\n    await this.userModel.update(userId, { ...dto, updateBy: userName });\n  }\n\n  async handleUpdatePassword(dto: UpdateCurrentUserPasswordDTO) {\n    const { userName } = this.contextService.getPayload();\n\n    const user = await this.userModel\n      .createQueryBuilder(\"user\")\n      .select(\"user\")\n      .addSelect(\"user.password\")\n      .where({\n        userName,\n      })\n      .getOne();\n\n    const isMatch = await HashUtil.compare(dto.oldPassword, user.password);\n\n    if (!isMatch) {\n      throw new BadRequestException(MESSAGES.PASSWORD_NOT_EQUAL);\n    }\n\n    const password = await HashUtil.crypto(dto.newPassword);\n\n    await this.userModel.update(user.id, { password, updateBy: userName });\n  }\n\n  /**\n   * 根据菜单列表生成用户菜单\n   * @param {SysMenuEntity[]} menus 菜单列表\n   */\n  private async transformMenus(menus: SysMenuEntity[]) {\n    // 过滤按钮权限\n    const filteredMenus = menus.filter((v) => v.menuType !== \"F\");\n    const data = new Set<IUserMenu>();\n\n    for (const menu of filteredMenus) {\n      let alwaysShow = false;\n      let children = null;\n      let path = menu.path;\n      let redirect = menu.redirect;\n      let component = \"\";\n      let componentName = \"\";\n\n      const childMenus = filteredMenus.filter((v) => v.parentId === menu.id);\n\n      // 有子菜单时设置总是显示\n      if (childMenus.length > 0) {\n        alwaysShow = true;\n        children = [];\n      }\n\n      // 父路由必须以 `/` 开始\n      if (menu.parentId === \"0\" && !path.startsWith(\"/\")) {\n        path = `/${path}`;\n      }\n\n      // 重定向必须以 `/` 开始\n      if (redirect && !redirect.startsWith(\"/\")) {\n        redirect = `/${redirect}`;\n      }\n\n      if (menu.component) {\n        component = menu.component;\n        componentName = ProxyUtil.case.pascalCase(menu.component);\n      } else if (menu.parentId === \"0\") {\n        component = \"DefaultLayout\";\n      } else {\n        component = \"ParentLayout\";\n      }\n\n      data.add({\n        key: menu.id,\n        parentKey: menu.parentId,\n        path,\n        name: \"\",\n        redirect,\n        component,\n        componentName,\n        meta: {\n          title: menu.menuName,\n          icon: menu.icon,\n          sort: menu.orderNum,\n          hidden: menu.visible === \"1\",\n          noCache: menu.isCache === \"1\",\n          alwaysShow,\n        },\n        children,\n      });\n    }\n\n    return Array.from(data);\n  }\n}\n"],"names":["CurrentUserService","handleGetInfo","roles","permissions","user","contextService","getUserWithPermission","result","length","map","v","roleKey","handleGetProfile","userName","getPayload","dept","posts","rest","userModel","findOne","relations","where","postGroup","postName","join","roleGroup","roleName","deptName","handleUpdateBase","dto","userId","update","updateBy","handleUpdatePassword","createQueryBuilder","select","addSelect","getOne","isMatch","HashUtil","compare","oldPassword","password","BadRequestException","MESSAGES","PASSWORD_NOT_EQUAL","crypto","newPassword","id","transformMenus","menus","filteredMenus","filter","menuType","data","Set","menu","alwaysShow","children","path","redirect","component","componentName","childMenus","parentId","startsWith","ProxyUtil","case","pascalCase","add","key","parentKey","name","meta","title","menuName","icon","sort","orderNum","hidden","visible","noCache","isCache","Array","from","constructor","menuModel","Injectable","InjectRepository","SysUserEntity","SysMenuEntity"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}