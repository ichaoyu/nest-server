{"version":3,"sources":["../../../../src/modules/system/config/config.service.ts"],"sourcesContent":["import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { EXCEL_SERVICE, ExcelService } from '@/shared/excel';\nimport { Between, Repository } from 'typeorm';\n\nimport { MESSAGES } from '@/constants';\nimport { SysConfigEntity } from '@/database';\nimport { DelDTO } from '@/models';\nimport { ContextService } from '@/shared';\n\nimport {\n  CreateConfigDTO,\n  FindConfigPageDTO,\n  UpdateConfigDTO,\n} from './config.dto';\nimport { ConfigExportSerialize } from './config.serialize';\n\n@Injectable()\nexport class ConfigService {\n  constructor(\n    @Inject(EXCEL_SERVICE)\n    private excelService: ExcelService,\n    @InjectRepository(SysConfigEntity)\n    private configModel: Repository<SysConfigEntity>,\n    private contextService: ContextService,\n  ) {}\n\n  async handleFindPage(dto: FindConfigPageDTO) {\n    const { pageNum, pageSize, beginDate, endDate, ...rest } = dto;\n\n    const [list, total] = await this.configModel.findAndCount({\n      where: {\n        createTime: beginDate ? Between(beginDate, endDate) : null,\n        ...rest,\n      },\n      take: pageSize,\n      skip: (pageNum - 1) * pageSize,\n    });\n\n    return {\n      pageNum,\n      pageSize,\n      total,\n      list,\n    };\n  }\n\n  async handleGetValue(key: string) {\n    return await this.configModel.findOneBy({ configKey: key });\n  }\n\n  async handleCreate(dto: CreateConfigDTO) {\n    const { configKey } = dto;\n    const { userName } = this.contextService.getPayload();\n\n    const existConfig = await this.configModel.findOneBy({ configKey });\n\n    if (existConfig) {\n      throw new BadRequestException(MESSAGES.CONFIG_EXIST);\n    }\n\n    await this.configModel.insert({\n      ...dto,\n      createBy: userName,\n    });\n  }\n\n  async handleUpdate(id: string, dto: UpdateConfigDTO) {\n    const { userName } = this.contextService.getPayload();\n\n    const existConfig = await this.configModel.findOneBy({ id });\n\n    if (!existConfig) {\n      throw new BadRequestException(MESSAGES.CONFIG_NOT_EXIST);\n    }\n\n    await this.configModel.update(id, { ...dto, updateBy: userName });\n  }\n\n  async handleDeleteMany(dto: DelDTO) {\n    const { ids } = dto;\n\n    await this.configModel.delete(ids);\n  }\n\n  async handleExportPage(dto: FindConfigPageDTO) {\n    const { list } = await this.handleFindPage(dto);\n\n    return await this.excelService.handleExport({\n      sheetName: '配置',\n      fileName: '配置报表',\n      Cls: ConfigExportSerialize,\n      data: list,\n    });\n  }\n}\n"],"names":["ConfigService","handleFindPage","dto","pageNum","pageSize","beginDate","endDate","rest","list","total","configModel","findAndCount","where","createTime","Between","take","skip","handleGetValue","key","findOneBy","configKey","handleCreate","userName","contextService","getPayload","existConfig","BadRequestException","MESSAGES","CONFIG_EXIST","insert","createBy","handleUpdate","id","CONFIG_NOT_EXIST","update","updateBy","handleDeleteMany","ids","delete","handleExportPage","excelService","handleExport","sheetName","fileName","Cls","ConfigExportSerialize","data","constructor","Injectable","Inject","EXCEL_SERVICE","InjectRepository","SysConfigEntity"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAkBaA;;;eAAAA;;;wBAlB2C;yBACvB;uBACW;0BACR;2BAEX;0BACO;wBAED;iCAOO;;;;;;;;;;;;;;;AAG/B,IAAA,AAAMA,gBAAN,MAAMA;IASX,MAAMC,eAAeC,GAAsB,EAAE;QAC3C,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAE,GAAGC,MAAM,GAAGL;QAE3D,MAAM,CAACM,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,WAAW,CAACC,YAAY,CAAC;YACxDC,OAAO;gBACLC,YAAYR,YAAYS,IAAAA,iBAAO,EAACT,WAAWC,WAAW;gBACtD,GAAGC,IAAI;YACT;YACAQ,MAAMX;YACNY,MAAM,AAACb,CAAAA,UAAU,CAAA,IAAKC;QACxB;QAEA,OAAO;YACLD;YACAC;YACAK;YACAD;QACF;IACF;IAEA,MAAMS,eAAeC,GAAW,EAAE;QAChC,OAAO,MAAM,IAAI,CAACR,WAAW,CAACS,SAAS,CAAC;YAAEC,WAAWF;QAAI;IAC3D;IAEA,MAAMG,aAAanB,GAAoB,EAAE;QACvC,MAAM,EAAEkB,SAAS,EAAE,GAAGlB;QACtB,MAAM,EAAEoB,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAMC,cAAc,MAAM,IAAI,CAACf,WAAW,CAACS,SAAS,CAAC;YAAEC;QAAU;QAEjE,IAAIK,aAAa;YACf,MAAM,IAAIC,2BAAmB,CAACC,mBAAQ,CAACC,YAAY;QACrD;QAEA,MAAM,IAAI,CAAClB,WAAW,CAACmB,MAAM,CAAC;YAC5B,GAAG3B,GAAG;YACN4B,UAAUR;QACZ;IACF;IAEA,MAAMS,aAAaC,EAAU,EAAE9B,GAAoB,EAAE;QACnD,MAAM,EAAEoB,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAMC,cAAc,MAAM,IAAI,CAACf,WAAW,CAACS,SAAS,CAAC;YAAEa;QAAG;QAE1D,IAAI,CAACP,aAAa;YAChB,MAAM,IAAIC,2BAAmB,CAACC,mBAAQ,CAACM,gBAAgB;QACzD;QAEA,MAAM,IAAI,CAACvB,WAAW,CAACwB,MAAM,CAACF,IAAI;YAAE,GAAG9B,GAAG;YAAEiC,UAAUb;QAAS;IACjE;IAEA,MAAMc,iBAAiBlC,GAAW,EAAE;QAClC,MAAM,EAAEmC,GAAG,EAAE,GAAGnC;QAEhB,MAAM,IAAI,CAACQ,WAAW,CAAC4B,MAAM,CAACD;IAChC;IAEA,MAAME,iBAAiBrC,GAAsB,EAAE;QAC7C,MAAM,EAAEM,IAAI,EAAE,GAAG,MAAM,IAAI,CAACP,cAAc,CAACC;QAE3C,OAAO,MAAM,IAAI,CAACsC,YAAY,CAACC,YAAY,CAAC;YAC1CC,WAAW;YACXC,UAAU;YACVC,KAAKC,sCAAqB;YAC1BC,MAAMtC;QACR;IACF;IA3EAuC,YACE,AACQP,YAA0B,EAClC,AACQ9B,WAAwC,EAChD,AAAQa,cAA8B,CACtC;aAJQiB,eAAAA;aAEA9B,cAAAA;aACAa,iBAAAA;IACP;AAsEL;AA7EavB;IADZgD,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,cAAM,EAACC,oBAAa;IAEpBC,aAAAA,IAAAA,yBAAgB,EAACC,yBAAe;;;eADX,mBAAY,4BAAZ,mBAAY;eAEb,oBAAU,4BAAV,oBAAU;eACP,sBAAc,4BAAd,sBAAc;;GAN7BpD"}