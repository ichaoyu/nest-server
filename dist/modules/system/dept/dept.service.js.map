{"version":3,"sources":["../../../../src/modules/system/dept/dept.service.ts"],"sourcesContent":["import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { In, Repository } from 'typeorm';\n\nimport { ENTITY_DEL_FLAG, ENTITY_STATUS, MESSAGES } from '@/constants';\nimport { SysDeptEntity } from '@/database';\nimport { DelDTO } from '@/models';\nimport { ContextService } from '@/shared';\nimport { TransformUtil } from '@/utils';\n\nimport { CreateDeptDTO, FindDeptListDTO, UpdateDeptDTO } from './dept.dto';\n\n@Injectable()\nexport class DeptService {\n  constructor(\n    @InjectRepository(SysDeptEntity)\n    private deptModel: Repository<SysDeptEntity>,\n    private contextService: ContextService,\n  ) {}\n\n  async handleFindList(dto: FindDeptListDTO) {\n    const { ...where } = dto;\n\n    return await this.deptModel.find({\n      where: {\n        delFlag: ENTITY_DEL_FLAG.EXIST,\n        ...where,\n      },\n      order: {\n        orderNum: 'ASC',\n      },\n    });\n  }\n\n  async handleGetTree() {\n    const data = await this.deptModel.find({\n      where: {\n        delFlag: ENTITY_DEL_FLAG.EXIST,\n        status: ENTITY_STATUS.NORMAL,\n      },\n    });\n\n    return TransformUtil.listToTree(data, {\n      title: 'deptName',\n      key: 'id',\n      parentKey: 'parentId',\n    });\n  }\n\n  async handleCreate(dto: CreateDeptDTO) {\n    const { parentId } = dto;\n    const { userName } = this.contextService.getPayload();\n\n    const parentDept = await this.deptModel.findOneBy({ id: parentId });\n\n    if (!parentDept) {\n      throw new BadRequestException(MESSAGES.PARENT_DEPT_NOT_EXIST);\n    }\n\n    await this.deptModel.insert({\n      ...dto,\n      ancestors: `${parentDept.ancestors},${parentDept.id}`,\n      createBy: userName,\n    });\n  }\n\n  async handleDeleteMany(dto: DelDTO) {\n    const { ids } = dto;\n\n    const list = await this.deptModel.find({\n      relations: { roles: true },\n      where: { id: In(ids) },\n    });\n\n    for (const dept of list) {\n      await this.deptModel.update(dept.id, {\n        delFlag: ENTITY_DEL_FLAG.DELETE,\n        roles: [],\n      });\n    }\n  }\n\n  async handleUpdate(id: string, dto: UpdateDeptDTO) {\n    const { parentId } = dto;\n    const { userName } = this.contextService.getPayload();\n\n    const [dept, parentDept] = await Promise.all([\n      this.deptModel.findOneBy({ id }),\n      this.deptModel.findOneBy({ id: parentId }),\n    ]);\n\n    if (!dept) {\n      throw new BadRequestException(MESSAGES.DEPT_NOT_EXIST);\n    }\n\n    if (!parentDept) {\n      throw new BadRequestException(MESSAGES.PARENT_DEPT_NOT_EXIST);\n    }\n\n    await this.deptModel.update(id, {\n      ...dto,\n      ancestors:\n        dept.parentId !== parentId\n          ? `${parentDept.ancestors},${parentDept.id}`\n          : dept.ancestors,\n      updateBy: userName,\n    });\n  }\n}\n"],"names":["DeptService","handleFindList","dto","where","deptModel","find","delFlag","ENTITY_DEL_FLAG","EXIST","order","orderNum","handleGetTree","data","status","ENTITY_STATUS","NORMAL","TransformUtil","listToTree","title","key","parentKey","handleCreate","parentId","userName","contextService","getPayload","parentDept","findOneBy","id","BadRequestException","MESSAGES","PARENT_DEPT_NOT_EXIST","insert","ancestors","createBy","handleDeleteMany","ids","list","relations","roles","In","dept","update","DELETE","handleUpdate","Promise","all","DEPT_NOT_EXIST","updateBy","constructor","Injectable","InjectRepository","SysDeptEntity"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAaaA;;;eAAAA;;;wBAbmC;yBACf;0BACF;2BAE0B;0BAC3B;wBAEC;uBACD;;;;;;;;;;;;;;;AAKvB,IAAA,AAAMA,cAAN,MAAMA;IAOX,MAAMC,eAAeC,GAAoB,EAAE;QACzC,MAAM,EAAE,GAAGC,OAAO,GAAGD;QAErB,OAAO,MAAM,IAAI,CAACE,SAAS,CAACC,IAAI,CAAC;YAC/BF,OAAO;gBACLG,SAASC,0BAAe,CAACC,KAAK;gBAC9B,GAAGL,KAAK;YACV;YACAM,OAAO;gBACLC,UAAU;YACZ;QACF;IACF;IAEA,MAAMC,gBAAgB;QACpB,MAAMC,OAAO,MAAM,IAAI,CAACR,SAAS,CAACC,IAAI,CAAC;YACrCF,OAAO;gBACLG,SAASC,0BAAe,CAACC,KAAK;gBAC9BK,QAAQC,wBAAa,CAACC,MAAM;YAC9B;QACF;QAEA,OAAOC,oBAAa,CAACC,UAAU,CAACL,MAAM;YACpCM,OAAO;YACPC,KAAK;YACLC,WAAW;QACb;IACF;IAEA,MAAMC,aAAanB,GAAkB,EAAE;QACrC,MAAM,EAAEoB,QAAQ,EAAE,GAAGpB;QACrB,MAAM,EAAEqB,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAMC,aAAa,MAAM,IAAI,CAACtB,SAAS,CAACuB,SAAS,CAAC;YAAEC,IAAIN;QAAS;QAEjE,IAAI,CAACI,YAAY;YACf,MAAM,IAAIG,2BAAmB,CAACC,mBAAQ,CAACC,qBAAqB;QAC9D;QAEA,MAAM,IAAI,CAAC3B,SAAS,CAAC4B,MAAM,CAAC;YAC1B,GAAG9B,GAAG;YACN+B,WAAW,CAAC,EAAEP,WAAWO,SAAS,CAAC,CAAC,EAAEP,WAAWE,EAAE,CAAC,CAAC;YACrDM,UAAUX;QACZ;IACF;IAEA,MAAMY,iBAAiBjC,GAAW,EAAE;QAClC,MAAM,EAAEkC,GAAG,EAAE,GAAGlC;QAEhB,MAAMmC,OAAO,MAAM,IAAI,CAACjC,SAAS,CAACC,IAAI,CAAC;YACrCiC,WAAW;gBAAEC,OAAO;YAAK;YACzBpC,OAAO;gBAAEyB,IAAIY,IAAAA,YAAE,EAACJ;YAAK;QACvB;QAEA,KAAK,MAAMK,QAAQJ,KAAM;YACvB,MAAM,IAAI,CAACjC,SAAS,CAACsC,MAAM,CAACD,KAAKb,EAAE,EAAE;gBACnCtB,SAASC,0BAAe,CAACoC,MAAM;gBAC/BJ,OAAO,EAAE;YACX;QACF;IACF;IAEA,MAAMK,aAAahB,EAAU,EAAE1B,GAAkB,EAAE;QACjD,MAAM,EAAEoB,QAAQ,EAAE,GAAGpB;QACrB,MAAM,EAAEqB,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAM,CAACgB,MAAMf,WAAW,GAAG,MAAMmB,QAAQC,GAAG,CAAC;YAC3C,IAAI,CAAC1C,SAAS,CAACuB,SAAS,CAAC;gBAAEC;YAAG;YAC9B,IAAI,CAACxB,SAAS,CAACuB,SAAS,CAAC;gBAAEC,IAAIN;YAAS;SACzC;QAED,IAAI,CAACmB,MAAM;YACT,MAAM,IAAIZ,2BAAmB,CAACC,mBAAQ,CAACiB,cAAc;QACvD;QAEA,IAAI,CAACrB,YAAY;YACf,MAAM,IAAIG,2BAAmB,CAACC,mBAAQ,CAACC,qBAAqB;QAC9D;QAEA,MAAM,IAAI,CAAC3B,SAAS,CAACsC,MAAM,CAACd,IAAI;YAC9B,GAAG1B,GAAG;YACN+B,WACEQ,KAAKnB,QAAQ,KAAKA,WACd,CAAC,EAAEI,WAAWO,SAAS,CAAC,CAAC,EAAEP,WAAWE,EAAE,CAAC,CAAC,GAC1Ca,KAAKR,SAAS;YACpBe,UAAUzB;QACZ;IACF;IA7FA0B,YACE,AACQ7C,SAAoC,EAC5C,AAAQoB,cAA8B,CACtC;aAFQpB,YAAAA;aACAoB,iBAAAA;IACP;AA0FL;AA/FaxB;IADZkD,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,yBAAgB,EAACC,uBAAa;;;eACZ,oBAAU,4BAAV,oBAAU;eACL,sBAAc,4BAAd,sBAAc;;GAJ7BpD"}