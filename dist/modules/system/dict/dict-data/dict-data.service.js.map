{"version":3,"sources":["../../../../../src/modules/system/dict/dict-data/dict-data.service.ts"],"sourcesContent":["import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { EXCEL_SERVICE, ExcelService } from '@/shared/excel';\nimport { Repository } from 'typeorm';\n\nimport { ENTITY_STATUS, MESSAGES } from '@/constants';\nimport { SysDictDataEntity } from '@/database';\nimport { DelDTO } from '@/models';\nimport { ContextService } from '@/shared';\n\nimport {\n  CreateDictDataDTO,\n  FindDictDataPageDTO,\n  UpdateDictDataDTO,\n} from './dict-data.dto';\nimport { DictDataExportSerialize } from './dict-data.serialize';\n\n@Injectable()\nexport class DictDataService {\n  constructor(\n    @Inject(EXCEL_SERVICE)\n    private excelService: ExcelService,\n    @InjectRepository(SysDictDataEntity)\n    private dictDataModel: Repository<SysDictDataEntity>,\n    private contextService: ContextService,\n  ) {}\n\n  async handleFindPage(dto: FindDictDataPageDTO) {\n    const { pageNum, pageSize, ...where } = dto;\n\n    const [list, total] = await this.dictDataModel.findAndCount({\n      where: {\n        ...where,\n      },\n      order: {\n        dictSort: 'ASC',\n      },\n      take: pageSize,\n      skip: (pageNum - 1) * pageSize,\n    });\n\n    return {\n      pageNum,\n      pageSize,\n      total,\n      list,\n    };\n  }\n\n  async handleGetList(dictType: string) {\n    return await this.dictDataModel.findBy({\n      dictType,\n      status: ENTITY_STATUS.NORMAL,\n    });\n  }\n\n  async handleCreate(dto: CreateDictDataDTO) {\n    const { dictValue, dictType } = dto;\n    const { userName } = this.contextService.getPayload();\n\n    const existDictData = await this.dictDataModel.findOneBy({\n      dictValue,\n      dictType,\n    });\n\n    if (existDictData) {\n      throw new BadRequestException(MESSAGES.DICT_DATA_EXIST);\n    }\n\n    await this.dictDataModel.insert({\n      ...dto,\n      createBy: userName,\n    });\n  }\n\n  async handleUpdate(id: string, dto: UpdateDictDataDTO) {\n    const { userName } = this.contextService.getPayload();\n\n    const existDictData = await this.dictDataModel.findOneBy({ id });\n\n    if (!existDictData) {\n      throw new BadRequestException(MESSAGES.DICT_DATA_NOT_EXIST);\n    }\n\n    await this.dictDataModel.update(id, { ...dto, updateBy: userName });\n  }\n\n  async handleDeleteMany(dto: DelDTO) {\n    const { ids } = dto;\n\n    await this.dictDataModel.delete(ids);\n  }\n\n  async handleExportPage(dto: FindDictDataPageDTO) {\n    const { list } = await this.handleFindPage(dto);\n\n    return await this.excelService.handleExport({\n      sheetName: '字典数据',\n      fileName: '字典数据报表',\n      Cls: DictDataExportSerialize,\n      data: list,\n    });\n  }\n}\n"],"names":["DictDataService","handleFindPage","dto","pageNum","pageSize","where","list","total","dictDataModel","findAndCount","order","dictSort","take","skip","handleGetList","dictType","findBy","status","ENTITY_STATUS","NORMAL","handleCreate","dictValue","userName","contextService","getPayload","existDictData","findOneBy","BadRequestException","MESSAGES","DICT_DATA_EXIST","insert","createBy","handleUpdate","id","DICT_DATA_NOT_EXIST","update","updateBy","handleDeleteMany","ids","delete","handleExportPage","excelService","handleExport","sheetName","fileName","Cls","DictDataExportSerialize","data","constructor","Injectable","Inject","EXCEL_SERVICE","InjectRepository","SysDictDataEntity"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAkBaA;;;eAAAA;;;wBAlB2C;yBACvB;uBACW;0BACjB;2BAEa;0BACN;wBAEH;mCAOS;;;;;;;;;;;;;;;AAGjC,IAAA,AAAMA,kBAAN,MAAMA;IASX,MAAMC,eAAeC,GAAwB,EAAE;QAC7C,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE,GAAGC,OAAO,GAAGH;QAExC,MAAM,CAACI,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,aAAa,CAACC,YAAY,CAAC;YAC1DJ,OAAO;gBACL,GAAGA,KAAK;YACV;YACAK,OAAO;gBACLC,UAAU;YACZ;YACAC,MAAMR;YACNS,MAAM,AAACV,CAAAA,UAAU,CAAA,IAAKC;QACxB;QAEA,OAAO;YACLD;YACAC;YACAG;YACAD;QACF;IACF;IAEA,MAAMQ,cAAcC,QAAgB,EAAE;QACpC,OAAO,MAAM,IAAI,CAACP,aAAa,CAACQ,MAAM,CAAC;YACrCD;YACAE,QAAQC,wBAAa,CAACC,MAAM;QAC9B;IACF;IAEA,MAAMC,aAAalB,GAAsB,EAAE;QACzC,MAAM,EAAEmB,SAAS,EAAEN,QAAQ,EAAE,GAAGb;QAChC,MAAM,EAAEoB,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAMC,gBAAgB,MAAM,IAAI,CAACjB,aAAa,CAACkB,SAAS,CAAC;YACvDL;YACAN;QACF;QAEA,IAAIU,eAAe;YACjB,MAAM,IAAIE,2BAAmB,CAACC,mBAAQ,CAACC,eAAe;QACxD;QAEA,MAAM,IAAI,CAACrB,aAAa,CAACsB,MAAM,CAAC;YAC9B,GAAG5B,GAAG;YACN6B,UAAUT;QACZ;IACF;IAEA,MAAMU,aAAaC,EAAU,EAAE/B,GAAsB,EAAE;QACrD,MAAM,EAAEoB,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAMC,gBAAgB,MAAM,IAAI,CAACjB,aAAa,CAACkB,SAAS,CAAC;YAAEO;QAAG;QAE9D,IAAI,CAACR,eAAe;YAClB,MAAM,IAAIE,2BAAmB,CAACC,mBAAQ,CAACM,mBAAmB;QAC5D;QAEA,MAAM,IAAI,CAAC1B,aAAa,CAAC2B,MAAM,CAACF,IAAI;YAAE,GAAG/B,GAAG;YAAEkC,UAAUd;QAAS;IACnE;IAEA,MAAMe,iBAAiBnC,GAAW,EAAE;QAClC,MAAM,EAAEoC,GAAG,EAAE,GAAGpC;QAEhB,MAAM,IAAI,CAACM,aAAa,CAAC+B,MAAM,CAACD;IAClC;IAEA,MAAME,iBAAiBtC,GAAwB,EAAE;QAC/C,MAAM,EAAEI,IAAI,EAAE,GAAG,MAAM,IAAI,CAACL,cAAc,CAACC;QAE3C,OAAO,MAAM,IAAI,CAACuC,YAAY,CAACC,YAAY,CAAC;YAC1CC,WAAW;YACXC,UAAU;YACVC,KAAKC,0CAAuB;YAC5BC,MAAMzC;QACR;IACF;IAnFA0C,YACE,AACQP,YAA0B,EAClC,AACQjC,aAA4C,EACpD,AAAQe,cAA8B,CACtC;aAJQkB,eAAAA;aAEAjC,gBAAAA;aACAe,iBAAAA;IACP;AA8EL;AArFavB;IADZiD,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,cAAM,EAACC,oBAAa;IAEpBC,aAAAA,IAAAA,yBAAgB,EAACC,2BAAiB;;;eADb,mBAAY,4BAAZ,mBAAY;eAEX,oBAAU,4BAAV,oBAAU;eACT,sBAAc,4BAAd,sBAAc;;GAN7BrD"}