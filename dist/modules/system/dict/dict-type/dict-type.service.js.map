{"version":3,"sources":["../../../../../src/modules/system/dict/dict-type/dict-type.service.ts"],"sourcesContent":["import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { EXCEL_SERVICE, ExcelService } from '@/shared/excel';\nimport { Repository } from 'typeorm';\n\nimport { MESSAGES } from '@/constants';\nimport { SysDictTypeEntity } from '@/database';\nimport { DelDTO } from '@/models';\nimport { ContextService } from '@/shared';\n\nimport {\n  CreateDictTypeDTO,\n  FindDictTypePageDTO,\n  UpdateDictTypeDTO,\n} from './dict-type.dto';\nimport { DictTypeExportSerialize } from './dict-type.serialize';\n\n@Injectable()\nexport class DictTypeService {\n  constructor(\n    @Inject(EXCEL_SERVICE)\n    private excelService: ExcelService,\n    @InjectRepository(SysDictTypeEntity)\n    private dictTypeModel: Repository<SysDictTypeEntity>,\n    private contextService: ContextService,\n  ) {}\n\n  async handleFindPage(dto: FindDictTypePageDTO) {\n    const { pageNum, pageSize, ...where } = dto;\n\n    const [list, total] = await this.dictTypeModel.findAndCount({\n      where: {\n        ...where,\n      },\n      take: pageSize,\n      skip: (pageNum - 1) * pageSize,\n    });\n\n    return {\n      pageNum,\n      pageSize,\n      total,\n      list,\n    };\n  }\n\n  async handleCreate(dto: CreateDictTypeDTO) {\n    const { dictType } = dto;\n    const { userName } = this.contextService.getPayload();\n\n    const existDictType = await this.dictTypeModel.findOneBy({ dictType });\n\n    if (existDictType) {\n      throw new BadRequestException(MESSAGES.DICT_TYPE_EXIST);\n    }\n\n    await this.dictTypeModel.insert({ ...dto, createBy: userName });\n  }\n\n  async handleDeleteMany(dto: DelDTO) {\n    const { ids } = dto;\n\n    await this.dictTypeModel.delete(ids);\n  }\n\n  async handleUpdate(id: string, dto: UpdateDictTypeDTO) {\n    const { userName } = this.contextService.getPayload();\n\n    const existDictType = await this.dictTypeModel.findOneBy({ id });\n\n    if (!existDictType) {\n      throw new BadRequestException(MESSAGES.DICT_TYPE_NOT_EXIST);\n    }\n\n    await this.dictTypeModel.update(id, { ...dto, updateBy: userName });\n  }\n\n  async handleGetDictType(id: string) {\n    return await this.dictTypeModel.findOneBy({ id });\n  }\n\n  async handleExportPage(dto: FindDictTypePageDTO) {\n    const { list } = await this.handleFindPage(dto);\n\n    return await this.excelService.handleExport({\n      sheetName: '字典类型',\n      fileName: '字典类型报表',\n      Cls: DictTypeExportSerialize,\n      data: list,\n    });\n  }\n}\n"],"names":["DictTypeService","handleFindPage","dto","pageNum","pageSize","where","list","total","dictTypeModel","findAndCount","take","skip","handleCreate","dictType","userName","contextService","getPayload","existDictType","findOneBy","BadRequestException","MESSAGES","DICT_TYPE_EXIST","insert","createBy","handleDeleteMany","ids","delete","handleUpdate","id","DICT_TYPE_NOT_EXIST","update","updateBy","handleGetDictType","handleExportPage","excelService","handleExport","sheetName","fileName","Cls","DictTypeExportSerialize","data","constructor","Injectable","Inject","EXCEL_SERVICE","InjectRepository","SysDictTypeEntity"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAkBaA;;;eAAAA;;;wBAlB2C;yBACvB;uBACW;0BACjB;2BAEF;0BACS;wBAEH;mCAOS;;;;;;;;;;;;;;;AAGjC,IAAA,AAAMA,kBAAN,MAAMA;IASX,MAAMC,eAAeC,GAAwB,EAAE;QAC7C,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE,GAAGC,OAAO,GAAGH;QAExC,MAAM,CAACI,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,aAAa,CAACC,YAAY,CAAC;YAC1DJ,OAAO;gBACL,GAAGA,KAAK;YACV;YACAK,MAAMN;YACNO,MAAM,AAACR,CAAAA,UAAU,CAAA,IAAKC;QACxB;QAEA,OAAO;YACLD;YACAC;YACAG;YACAD;QACF;IACF;IAEA,MAAMM,aAAaV,GAAsB,EAAE;QACzC,MAAM,EAAEW,QAAQ,EAAE,GAAGX;QACrB,MAAM,EAAEY,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAMC,gBAAgB,MAAM,IAAI,CAACT,aAAa,CAACU,SAAS,CAAC;YAAEL;QAAS;QAEpE,IAAII,eAAe;YACjB,MAAM,IAAIE,2BAAmB,CAACC,mBAAQ,CAACC,eAAe;QACxD;QAEA,MAAM,IAAI,CAACb,aAAa,CAACc,MAAM,CAAC;YAAE,GAAGpB,GAAG;YAAEqB,UAAUT;QAAS;IAC/D;IAEA,MAAMU,iBAAiBtB,GAAW,EAAE;QAClC,MAAM,EAAEuB,GAAG,EAAE,GAAGvB;QAEhB,MAAM,IAAI,CAACM,aAAa,CAACkB,MAAM,CAACD;IAClC;IAEA,MAAME,aAAaC,EAAU,EAAE1B,GAAsB,EAAE;QACrD,MAAM,EAAEY,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAMC,gBAAgB,MAAM,IAAI,CAACT,aAAa,CAACU,SAAS,CAAC;YAAEU;QAAG;QAE9D,IAAI,CAACX,eAAe;YAClB,MAAM,IAAIE,2BAAmB,CAACC,mBAAQ,CAACS,mBAAmB;QAC5D;QAEA,MAAM,IAAI,CAACrB,aAAa,CAACsB,MAAM,CAACF,IAAI;YAAE,GAAG1B,GAAG;YAAE6B,UAAUjB;QAAS;IACnE;IAEA,MAAMkB,kBAAkBJ,EAAU,EAAE;QAClC,OAAO,MAAM,IAAI,CAACpB,aAAa,CAACU,SAAS,CAAC;YAAEU;QAAG;IACjD;IAEA,MAAMK,iBAAiB/B,GAAwB,EAAE;QAC/C,MAAM,EAAEI,IAAI,EAAE,GAAG,MAAM,IAAI,CAACL,cAAc,CAACC;QAE3C,OAAO,MAAM,IAAI,CAACgC,YAAY,CAACC,YAAY,CAAC;YAC1CC,WAAW;YACXC,UAAU;YACVC,KAAKC,0CAAuB;YAC5BC,MAAMlC;QACR;IACF;IAvEAmC,YACE,AACQP,YAA0B,EAClC,AACQ1B,aAA4C,EACpD,AAAQO,cAA8B,CACtC;aAJQmB,eAAAA;aAEA1B,gBAAAA;aACAO,iBAAAA;IACP;AAkEL;AAzEaf;IADZ0C,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,cAAM,EAACC,oBAAa;IAEpBC,aAAAA,IAAAA,yBAAgB,EAACC,2BAAiB;;;eADb,mBAAY,4BAAZ,mBAAY;eAEX,oBAAU,4BAAV,oBAAU;eACT,sBAAc,4BAAd,sBAAc;;GAN7B9C"}