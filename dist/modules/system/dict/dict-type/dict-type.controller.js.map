{"version":3,"sources":["../../../../../src/modules/system/dict/dict-type/dict-type.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Post,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOkResponse,\n  ApiOperation,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\n\nimport { ENTITY_BIZ_TYPE } from '@/constants';\nimport { OperLog, Permission } from '@/decorators';\nimport { DelDTO, ExportResultVO } from '@/models';\n\nimport {\n  CreateDictTypeDTO,\n  FindDictTypePageDTO,\n  UpdateDictTypeDTO,\n} from './dict-type.dto';\nimport { DictTypeService } from './dict-type.service';\nimport { FindDictTypePageVO, GetDictTypeVO } from './dict-type.vo';\n\n@ApiTags('字典类型接口')\n@ApiBearerAuth()\n@Controller('/system/dict/type')\nexport class DictTypeController {\n  constructor(private dictTypeService: DictTypeService) {}\n\n  @ApiOperation({ summary: '查询字典类型分页' })\n  @ApiOkResponse({ type: FindDictTypePageVO })\n  @Permission('system:dict:list')\n  @Post('/page')\n  async findPage(@Body() dto: FindDictTypePageDTO) {\n    return await this.dictTypeService.handleFindPage(dto);\n  }\n\n  @ApiOperation({ summary: '新增字典类型' })\n  @OperLog({ title: '字典类型', bizType: ENTITY_BIZ_TYPE.INSERT })\n  @Permission('system:dict:add')\n  @Post('/create')\n  async create(@Body() dto: CreateDictTypeDTO) {\n    await this.dictTypeService.handleCreate(dto);\n  }\n\n  @ApiOperation({ summary: '更新字典类型' })\n  @ApiQuery({ name: 'id', description: '主键' })\n  @OperLog({ title: '字典类型', bizType: ENTITY_BIZ_TYPE.UPDATE })\n  @Permission('system:dict:edit')\n  @Put('/update')\n  async update(@Query('id') id: string, @Body() dto: UpdateDictTypeDTO) {\n    await this.dictTypeService.handleUpdate(id, dto);\n  }\n\n  @ApiOperation({ summary: '删除字典类型' })\n  @OperLog({ title: '字典类型', bizType: ENTITY_BIZ_TYPE.DELETE })\n  @Permission('system:dict:remove')\n  @Delete('/delete')\n  async deleteMany(@Body() dto: DelDTO) {\n    await this.dictTypeService.handleDeleteMany(dto);\n  }\n\n  @ApiOperation({ summary: '获取字典类型' })\n  @ApiOkResponse({ type: GetDictTypeVO })\n  @ApiQuery({ name: 'id', description: '主键' })\n  @Permission('system:dict:list')\n  @Get('/')\n  async getDictType(@Query('id') id: string) {\n    return await this.dictTypeService.handleGetDictType(id);\n  }\n\n  @ApiOperation({ summary: '导出字典类型分页' })\n  @ApiOkResponse({ type: ExportResultVO })\n  @OperLog({ title: '字典类型', bizType: ENTITY_BIZ_TYPE.EXPORT })\n  @Permission('system:dict:export')\n  @Post('/export')\n  async exportPage(@Body() dto: FindDictTypePageDTO) {\n    return await this.dictTypeService.handleExportPage(dto);\n  }\n}\n"],"names":["DictTypeController","findPage","dto","dictTypeService","handleFindPage","create","handleCreate","update","id","handleUpdate","deleteMany","handleDeleteMany","getDictType","handleGetDictType","exportPage","handleExportPage","constructor","ApiOperation","summary","ApiOkResponse","type","FindDictTypePageVO","Permission","Post","Body","OperLog","title","bizType","ENTITY_BIZ_TYPE","INSERT","ApiQuery","name","description","UPDATE","Put","Query","DELETE","Delete","GetDictTypeVO","Get","ExportResultVO","EXPORT","ApiTags","ApiBearerAuth","Controller"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}