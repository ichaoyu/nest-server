{"version":3,"sources":["../../../../src/modules/system/menu/menu.service.ts"],"sourcesContent":["import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { ENTITY_STATUS, ENTITY_VISIBLE, MESSAGES } from '@/constants';\nimport { SysMenuEntity } from '@/database';\nimport { DelDTO } from '@/models';\nimport { ContextService } from '@/shared';\nimport { TransformUtil } from '@/utils';\n\nimport { CreateMenuDTO, FindMenuListDTO, UpdateMenuDTO } from './menu.dto';\n\n@Injectable()\nexport class MenuService {\n  constructor(\n    @InjectRepository(SysMenuEntity)\n    private menuModel: Repository<SysMenuEntity>,\n    private contextService: ContextService,\n  ) {}\n\n  async handleFindList(dto: FindMenuListDTO) {\n    return await this.menuModel.find({\n      order: {\n        orderNum: 'ASC',\n      },\n      where: {\n        ...dto,\n      },\n    });\n  }\n\n  async handleGetTree() {\n    const data = await this.menuModel.find({\n      where: { status: ENTITY_STATUS.NORMAL, visible: ENTITY_VISIBLE.YES },\n    });\n\n    return TransformUtil.listToTree(data, {\n      title: 'menuName',\n      key: 'id',\n      parentKey: 'parentId',\n    });\n  }\n\n  async handleCreate(dto: CreateMenuDTO) {\n    const { userName } = this.contextService.getPayload();\n\n    await this.menuModel.insert({ ...dto, createBy: userName });\n  }\n\n  async handleUpdate(id: string, dto: UpdateMenuDTO) {\n    const { userName } = this.contextService.getPayload();\n\n    const existMenu = await this.menuModel.findOneBy({ id });\n\n    if (!existMenu) {\n      throw new BadRequestException(MESSAGES.MENU_NOT_EXIST);\n    }\n\n    await this.menuModel.update(id, { ...dto, updateBy: userName });\n  }\n\n  async handleDeleteMany(dto: DelDTO) {\n    const { ids } = dto;\n\n    await this.menuModel.delete(ids);\n  }\n}\n"],"names":["MenuService","handleFindList","dto","menuModel","find","order","orderNum","where","handleGetTree","data","status","ENTITY_STATUS","NORMAL","visible","ENTITY_VISIBLE","YES","TransformUtil","listToTree","title","key","parentKey","handleCreate","userName","contextService","getPayload","insert","createBy","handleUpdate","id","existMenu","findOneBy","BadRequestException","MESSAGES","MENU_NOT_EXIST","update","updateBy","handleDeleteMany","ids","delete","constructor","Injectable","InjectRepository","SysMenuEntity"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAaaA;;;eAAAA;;;wBAbmC;yBACf;0BACN;2BAE6B;0BAC1B;wBAEC;uBACD;;;;;;;;;;;;;;;AAKvB,IAAA,AAAMA,cAAN,MAAMA;IAOX,MAAMC,eAAeC,GAAoB,EAAE;QACzC,OAAO,MAAM,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC;YAC/BC,OAAO;gBACLC,UAAU;YACZ;YACAC,OAAO;gBACL,GAAGL,GAAG;YACR;QACF;IACF;IAEA,MAAMM,gBAAgB;QACpB,MAAMC,OAAO,MAAM,IAAI,CAACN,SAAS,CAACC,IAAI,CAAC;YACrCG,OAAO;gBAAEG,QAAQC,wBAAa,CAACC,MAAM;gBAAEC,SAASC,yBAAc,CAACC,GAAG;YAAC;QACrE;QAEA,OAAOC,oBAAa,CAACC,UAAU,CAACR,MAAM;YACpCS,OAAO;YACPC,KAAK;YACLC,WAAW;QACb;IACF;IAEA,MAAMC,aAAanB,GAAkB,EAAE;QACrC,MAAM,EAAEoB,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAM,IAAI,CAACrB,SAAS,CAACsB,MAAM,CAAC;YAAE,GAAGvB,GAAG;YAAEwB,UAAUJ;QAAS;IAC3D;IAEA,MAAMK,aAAaC,EAAU,EAAE1B,GAAkB,EAAE;QACjD,MAAM,EAAEoB,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAMK,YAAY,MAAM,IAAI,CAAC1B,SAAS,CAAC2B,SAAS,CAAC;YAAEF;QAAG;QAEtD,IAAI,CAACC,WAAW;YACd,MAAM,IAAIE,2BAAmB,CAACC,mBAAQ,CAACC,cAAc;QACvD;QAEA,MAAM,IAAI,CAAC9B,SAAS,CAAC+B,MAAM,CAACN,IAAI;YAAE,GAAG1B,GAAG;YAAEiC,UAAUb;QAAS;IAC/D;IAEA,MAAMc,iBAAiBlC,GAAW,EAAE;QAClC,MAAM,EAAEmC,GAAG,EAAE,GAAGnC;QAEhB,MAAM,IAAI,CAACC,SAAS,CAACmC,MAAM,CAACD;IAC9B;IAnDAE,YACE,AACQpC,SAAoC,EAC5C,AAAQoB,cAA8B,CACtC;aAFQpB,YAAAA;aACAoB,iBAAAA;IACP;AAgDL;AArDavB;IADZwC,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,yBAAgB,EAACC,uBAAa;;;eACZ,oBAAU,4BAAV,oBAAU;eACL,sBAAc,4BAAd,sBAAc;;GAJ7B1C"}