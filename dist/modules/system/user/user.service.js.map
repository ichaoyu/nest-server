{"version":3,"sources":["../../../../src/modules/system/user/user.service.ts"],"sourcesContent":["import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { EXCEL_SERVICE, ExcelService } from '@/shared/excel';\nimport { Between, FindOptionsWhere, In, Like, Not, Repository } from 'typeorm';\n\nimport { ENTITY_DEL_FLAG, ENTITY_STATUS, MESSAGES } from '@/constants';\nimport { SysPostEntity, SysRoleEntity, SysUserEntity } from '@/database';\nimport { IFile } from '@/interfaces';\nimport { DelDTO } from '@/models';\nimport { ContextService } from '@/shared';\nimport { HashUtil } from '@/utils';\n\nimport {\n  CreateUserDTO,\n  FindUserPageDTO,\n  ResetPasswordDTO,\n  UpdateUserDTO,\n} from './user.dto';\nimport { UserExportSerialize, UserTemplateSerialize } from './user.serialize';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @Inject(EXCEL_SERVICE)\n    private excelService: ExcelService,\n    @InjectRepository(SysPostEntity)\n    private postModel: Repository<SysPostEntity>,\n    @InjectRepository(SysRoleEntity)\n    private roleModel: Repository<SysRoleEntity>,\n    @InjectRepository(SysUserEntity)\n    private userModel: Repository<SysUserEntity>,\n    private contextService: ContextService,\n  ) {}\n\n  async handleFindPage(dto: FindUserPageDTO) {\n    const { pageNum, pageSize, beginDate, endDate, deptId, ...where } = dto;\n\n    const conditions = {\n      delFlag: ENTITY_DEL_FLAG.EXIST,\n      createTime: beginDate ? Between(beginDate, endDate) : null,\n      ...where,\n    } as FindOptionsWhere<SysUserEntity>;\n\n    const [list, total] = await this.userModel.findAndCount({\n      relations: { dept: true },\n      where:\n        deptId && deptId !== '100'\n          ? [\n              {\n                ...conditions,\n                dept: {\n                  id: deptId,\n                },\n              },\n              {\n                ...conditions,\n                dept: {\n                  ancestors: Like(`%,${deptId}%`),\n                },\n              },\n            ]\n          : {\n              ...conditions,\n            },\n      take: pageSize,\n      skip: (pageNum - 1) * pageSize,\n    });\n\n    return {\n      pageNum,\n      pageSize,\n      total,\n      list,\n    };\n  }\n\n  async handleCreate(dto: CreateUserDTO) {\n    const { userName } = this.contextService.getPayload();\n    const { postIds, roleIds, ...rest } = dto;\n\n    const existUser = await this.userModel.findOneBy({\n      userName: dto.userName,\n    });\n\n    if (existUser) {\n      throw new BadRequestException(MESSAGES.USER_EXIST);\n    }\n\n    const password = await HashUtil.crypto(dto.password);\n    const posts =\n      postIds && postIds.length > 0\n        ? await this.postModel.findBy({\n            id: In(postIds),\n          })\n        : null;\n    const roles =\n      roleIds && roleIds.length > 0\n        ? await this.roleModel.findBy({\n            id: In(roleIds),\n          })\n        : null;\n\n    await this.userModel.insert({\n      ...rest,\n      posts,\n      roles,\n      password,\n      createBy: userName,\n    });\n  }\n\n  async handleUpdate(id: string, dto: UpdateUserDTO) {\n    const { userName } = this.contextService.getPayload();\n    const { postIds, roleIds, ...rest } = dto;\n\n    const existUser = await this.userModel.findOne({\n      relations: { posts: true, roles: true },\n      where: { id: id },\n    });\n\n    if (!existUser) {\n      throw new BadRequestException(MESSAGES.USER_NOT_EXIST);\n    }\n\n    const posts = postIds?.length\n      ? await this.postModel.findBy({\n          id: In(postIds),\n        })\n      : null;\n    const roles = roleIds?.length\n      ? await this.roleModel.findBy({\n          id: In(roleIds),\n        })\n      : null;\n    const newUser = this.userModel.merge(existUser, {\n      ...rest,\n      posts,\n      roles,\n      updateBy: userName,\n    });\n    await this.userModel.save(newUser);\n    // await this.userModel.update(id, {\n    //   ...rest,\n    //   posts,\n    //   roles,\n    //   updateBy: userName\n    // })\n  }\n\n  async handleGetFormData(id?: string) {\n    const posts = await this.postModel.findBy({\n      status: ENTITY_STATUS.NORMAL,\n    });\n    const roles = await this.roleModel.findBy({\n      delFlag: ENTITY_DEL_FLAG.EXIST,\n      id: Not('1'),\n    });\n\n    const data = <\n      {\n        posts: SysPostEntity[];\n        roles: SysRoleEntity[];\n        postIds?: string[];\n        roleIds?: string[];\n      }\n    >{\n      posts,\n      roles,\n    };\n\n    if (id) {\n      const user = await this.userModel.findOne({\n        relations: { posts: true, roles: true },\n        where: { id: id },\n      });\n\n      data.postIds = user.posts.map((v) => v.id);\n      data.roleIds = user.roles.map((v) => v.id);\n    }\n\n    return data;\n  }\n\n  async handleDeleteMany(dto: DelDTO) {\n    const { ids } = dto;\n\n    const list = await this.userModel.findBy({ id: In(ids) });\n\n    for (const user of list) {\n      // await this.userModel.update(user.id, {\n      //   delFlag: ENTITY_DEL_FLAG.DELETE,\n      //   posts: [],\n      //   roles: []\n      // })\n      await this.userModel.save(\n        this.userModel.merge(user, {\n          delFlag: ENTITY_DEL_FLAG.DELETE,\n          posts: [],\n          roles: [],\n        }),\n      );\n    }\n  }\n\n  async handleImportTemplate(file: IFile) {\n    const data = await this.excelService.handleImport({\n      sheetName: '用户',\n      filePath: file.filepath,\n      Cls: UserTemplateSerialize,\n    });\n\n    let success = 0;\n    let fail = 0;\n\n    for (const item of data) {\n      const isExist = await this.checkIsExist(item.userName);\n\n      if (isExist) {\n        fail++;\n      } else {\n        await this.handleCreate({ roleIds: [], postIds: [], ...item });\n        success++;\n      }\n    }\n\n    return {\n      success,\n      fail,\n    };\n  }\n\n  async handleExportTemplate() {\n    return await this.excelService.handleCreate({\n      sheetName: '用户',\n      fileName: '用户模板',\n      Cls: UserTemplateSerialize,\n    });\n  }\n\n  async handleExportPage(dto: FindUserPageDTO) {\n    const { list } = await this.handleFindPage(dto);\n\n    return await this.excelService.handleExport({\n      sheetName: '用户',\n      fileName: '用户报表',\n      Cls: UserExportSerialize,\n      data: list,\n    });\n  }\n\n  async handleResetPassword(id: string, dto: ResetPasswordDTO) {\n    const existUser = await this.userModel.findOneBy({ id });\n\n    if (!existUser) {\n      throw new BadRequestException(MESSAGES.USER_NOT_EXIST);\n    }\n\n    const { userName } = this.contextService.getPayload();\n    const password = await HashUtil.crypto(dto.password);\n\n    await this.userModel.update(id, { password, updateBy: userName });\n  }\n\n  async handleToggleStatus(id: string) {\n    const { userName } = this.contextService.getPayload();\n\n    const existUser = await this.userModel.findOneBy({ id });\n\n    if (!existUser) {\n      throw new BadRequestException(MESSAGES.USER_NOT_EXIST);\n    }\n\n    await this.userModel.update(id, {\n      status:\n        existUser.status === ENTITY_STATUS.NORMAL\n          ? ENTITY_STATUS.DISABLE\n          : ENTITY_STATUS.NORMAL,\n      updateBy: userName,\n    });\n  }\n\n  private async checkIsExist(userName: string) {\n    return await this.userModel.findOneBy({ userName });\n  }\n}\n"],"names":["UserService","handleFindPage","dto","pageNum","pageSize","beginDate","endDate","deptId","where","conditions","delFlag","ENTITY_DEL_FLAG","EXIST","createTime","Between","list","total","userModel","findAndCount","relations","dept","id","ancestors","Like","take","skip","handleCreate","userName","contextService","getPayload","postIds","roleIds","rest","existUser","findOneBy","BadRequestException","MESSAGES","USER_EXIST","password","HashUtil","crypto","posts","length","postModel","findBy","In","roles","roleModel","insert","createBy","handleUpdate","findOne","USER_NOT_EXIST","newUser","merge","updateBy","save","handleGetFormData","status","ENTITY_STATUS","NORMAL","Not","data","user","map","v","handleDeleteMany","ids","DELETE","handleImportTemplate","file","excelService","handleImport","sheetName","filePath","filepath","Cls","UserTemplateSerialize","success","fail","item","isExist","checkIsExist","handleExportTemplate","fileName","handleExportPage","handleExport","UserExportSerialize","handleResetPassword","update","handleToggleStatus","DISABLE","constructor","Injectable","Inject","EXCEL_SERVICE","InjectRepository","SysPostEntity","SysRoleEntity","SysUserEntity"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAqBaA;;;eAAAA;;;wBArB2C;yBACvB;uBACW;0BACyB;2BAEZ;0BACG;wBAG7B;uBACN;+BAQkC;;;;;;;;;;;;;;;AAGpD,IAAA,AAAMA,cAAN,MAAMA;IAaX,MAAMC,eAAeC,GAAoB,EAAE;QACzC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAE,GAAGC,OAAO,GAAGN;QAEpE,MAAMO,aAAa;YACjBC,SAASC,0BAAe,CAACC,KAAK;YAC9BC,YAAYR,YAAYS,IAAAA,iBAAO,EAACT,WAAWC,WAAW;YACtD,GAAGE,KAAK;QACV;QAEA,MAAM,CAACO,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,SAAS,CAACC,YAAY,CAAC;YACtDC,WAAW;gBAAEC,MAAM;YAAK;YACxBZ,OACED,UAAUA,WAAW,QACjB;gBACE;oBACE,GAAGE,UAAU;oBACbW,MAAM;wBACJC,IAAId;oBACN;gBACF;gBACA;oBACE,GAAGE,UAAU;oBACbW,MAAM;wBACJE,WAAWC,IAAAA,cAAI,EAAC,CAAC,EAAE,EAAEhB,OAAO,CAAC,CAAC;oBAChC;gBACF;aACD,GACD;gBACE,GAAGE,UAAU;YACf;YACNe,MAAMpB;YACNqB,MAAM,AAACtB,CAAAA,UAAU,CAAA,IAAKC;QACxB;QAEA,OAAO;YACLD;YACAC;YACAY;YACAD;QACF;IACF;IAEA,MAAMW,aAAaxB,GAAkB,EAAE;QACrC,MAAM,EAAEyB,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QACnD,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE,GAAGC,MAAM,GAAG9B;QAEtC,MAAM+B,YAAY,MAAM,IAAI,CAAChB,SAAS,CAACiB,SAAS,CAAC;YAC/CP,UAAUzB,IAAIyB,QAAQ;QACxB;QAEA,IAAIM,WAAW;YACb,MAAM,IAAIE,2BAAmB,CAACC,mBAAQ,CAACC,UAAU;QACnD;QAEA,MAAMC,WAAW,MAAMC,eAAQ,CAACC,MAAM,CAACtC,IAAIoC,QAAQ;QACnD,MAAMG,QACJX,WAAWA,QAAQY,MAAM,GAAG,IACxB,MAAM,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC;YAC1BvB,IAAIwB,IAAAA,YAAE,EAACf;QACT,KACA;QACN,MAAMgB,QACJf,WAAWA,QAAQW,MAAM,GAAG,IACxB,MAAM,IAAI,CAACK,SAAS,CAACH,MAAM,CAAC;YAC1BvB,IAAIwB,IAAAA,YAAE,EAACd;QACT,KACA;QAEN,MAAM,IAAI,CAACd,SAAS,CAAC+B,MAAM,CAAC;YAC1B,GAAGhB,IAAI;YACPS;YACAK;YACAR;YACAW,UAAUtB;QACZ;IACF;IAEA,MAAMuB,aAAa7B,EAAU,EAAEnB,GAAkB,EAAE;QACjD,MAAM,EAAEyB,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QACnD,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE,GAAGC,MAAM,GAAG9B;QAEtC,MAAM+B,YAAY,MAAM,IAAI,CAAChB,SAAS,CAACkC,OAAO,CAAC;YAC7ChC,WAAW;gBAAEsB,OAAO;gBAAMK,OAAO;YAAK;YACtCtC,OAAO;gBAAEa,IAAIA;YAAG;QAClB;QAEA,IAAI,CAACY,WAAW;YACd,MAAM,IAAIE,2BAAmB,CAACC,mBAAQ,CAACgB,cAAc;QACvD;QAEA,MAAMX,QAAQX,SAASY,SACnB,MAAM,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC;YAC1BvB,IAAIwB,IAAAA,YAAE,EAACf;QACT,KACA;QACJ,MAAMgB,QAAQf,SAASW,SACnB,MAAM,IAAI,CAACK,SAAS,CAACH,MAAM,CAAC;YAC1BvB,IAAIwB,IAAAA,YAAE,EAACd;QACT,KACA;QACJ,MAAMsB,UAAU,IAAI,CAACpC,SAAS,CAACqC,KAAK,CAACrB,WAAW;YAC9C,GAAGD,IAAI;YACPS;YACAK;YACAS,UAAU5B;QACZ;QACA,MAAM,IAAI,CAACV,SAAS,CAACuC,IAAI,CAACH;IAC1B,oCAAoC;IACpC,aAAa;IACb,WAAW;IACX,WAAW;IACX,uBAAuB;IACvB,KAAK;IACP;IAEA,MAAMI,kBAAkBpC,EAAW,EAAE;QACnC,MAAMoB,QAAQ,MAAM,IAAI,CAACE,SAAS,CAACC,MAAM,CAAC;YACxCc,QAAQC,wBAAa,CAACC,MAAM;QAC9B;QACA,MAAMd,QAAQ,MAAM,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC;YACxClC,SAASC,0BAAe,CAACC,KAAK;YAC9BS,IAAIwC,IAAAA,aAAG,EAAC;QACV;QAEA,MAAMC,OAOL;YACCrB;YACAK;QACF;QAEA,IAAIzB,IAAI;YACN,MAAM0C,OAAO,MAAM,IAAI,CAAC9C,SAAS,CAACkC,OAAO,CAAC;gBACxChC,WAAW;oBAAEsB,OAAO;oBAAMK,OAAO;gBAAK;gBACtCtC,OAAO;oBAAEa,IAAIA;gBAAG;YAClB;YAEAyC,KAAKhC,OAAO,GAAGiC,KAAKtB,KAAK,CAACuB,GAAG,CAAC,CAACC,IAAMA,EAAE5C,EAAE;YACzCyC,KAAK/B,OAAO,GAAGgC,KAAKjB,KAAK,CAACkB,GAAG,CAAC,CAACC,IAAMA,EAAE5C,EAAE;QAC3C;QAEA,OAAOyC;IACT;IAEA,MAAMI,iBAAiBhE,GAAW,EAAE;QAClC,MAAM,EAAEiE,GAAG,EAAE,GAAGjE;QAEhB,MAAMa,OAAO,MAAM,IAAI,CAACE,SAAS,CAAC2B,MAAM,CAAC;YAAEvB,IAAIwB,IAAAA,YAAE,EAACsB;QAAK;QAEvD,KAAK,MAAMJ,QAAQhD,KAAM;YACvB,yCAAyC;YACzC,qCAAqC;YACrC,eAAe;YACf,cAAc;YACd,KAAK;YACL,MAAM,IAAI,CAACE,SAAS,CAACuC,IAAI,CACvB,IAAI,CAACvC,SAAS,CAACqC,KAAK,CAACS,MAAM;gBACzBrD,SAASC,0BAAe,CAACyD,MAAM;gBAC/B3B,OAAO,EAAE;gBACTK,OAAO,EAAE;YACX;QAEJ;IACF;IAEA,MAAMuB,qBAAqBC,IAAW,EAAE;QACtC,MAAMR,OAAO,MAAM,IAAI,CAACS,YAAY,CAACC,YAAY,CAAC;YAChDC,WAAW;YACXC,UAAUJ,KAAKK,QAAQ;YACvBC,KAAKC,oCAAqB;QAC5B;QAEA,IAAIC,UAAU;QACd,IAAIC,OAAO;QAEX,KAAK,MAAMC,QAAQlB,KAAM;YACvB,MAAMmB,UAAU,MAAM,IAAI,CAACC,YAAY,CAACF,KAAKrD,QAAQ;YAErD,IAAIsD,SAAS;gBACXF;YACF,OAAO;gBACL,MAAM,IAAI,CAACrD,YAAY,CAAC;oBAAEK,SAAS,EAAE;oBAAED,SAAS,EAAE;oBAAE,GAAGkD,IAAI;gBAAC;gBAC5DF;YACF;QACF;QAEA,OAAO;YACLA;YACAC;QACF;IACF;IAEA,MAAMI,uBAAuB;QAC3B,OAAO,MAAM,IAAI,CAACZ,YAAY,CAAC7C,YAAY,CAAC;YAC1C+C,WAAW;YACXW,UAAU;YACVR,KAAKC,oCAAqB;QAC5B;IACF;IAEA,MAAMQ,iBAAiBnF,GAAoB,EAAE;QAC3C,MAAM,EAAEa,IAAI,EAAE,GAAG,MAAM,IAAI,CAACd,cAAc,CAACC;QAE3C,OAAO,MAAM,IAAI,CAACqE,YAAY,CAACe,YAAY,CAAC;YAC1Cb,WAAW;YACXW,UAAU;YACVR,KAAKW,kCAAmB;YACxBzB,MAAM/C;QACR;IACF;IAEA,MAAMyE,oBAAoBnE,EAAU,EAAEnB,GAAqB,EAAE;QAC3D,MAAM+B,YAAY,MAAM,IAAI,CAAChB,SAAS,CAACiB,SAAS,CAAC;YAAEb;QAAG;QAEtD,IAAI,CAACY,WAAW;YACd,MAAM,IAAIE,2BAAmB,CAACC,mBAAQ,CAACgB,cAAc;QACvD;QAEA,MAAM,EAAEzB,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QACnD,MAAMS,WAAW,MAAMC,eAAQ,CAACC,MAAM,CAACtC,IAAIoC,QAAQ;QAEnD,MAAM,IAAI,CAACrB,SAAS,CAACwE,MAAM,CAACpE,IAAI;YAAEiB;YAAUiB,UAAU5B;QAAS;IACjE;IAEA,MAAM+D,mBAAmBrE,EAAU,EAAE;QACnC,MAAM,EAAEM,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAMI,YAAY,MAAM,IAAI,CAAChB,SAAS,CAACiB,SAAS,CAAC;YAAEb;QAAG;QAEtD,IAAI,CAACY,WAAW;YACd,MAAM,IAAIE,2BAAmB,CAACC,mBAAQ,CAACgB,cAAc;QACvD;QAEA,MAAM,IAAI,CAACnC,SAAS,CAACwE,MAAM,CAACpE,IAAI;YAC9BqC,QACEzB,UAAUyB,MAAM,KAAKC,wBAAa,CAACC,MAAM,GACrCD,wBAAa,CAACgC,OAAO,GACrBhC,wBAAa,CAACC,MAAM;YAC1BL,UAAU5B;QACZ;IACF;IAEA,MAAcuD,aAAavD,QAAgB,EAAE;QAC3C,OAAO,MAAM,IAAI,CAACV,SAAS,CAACiB,SAAS,CAAC;YAAEP;QAAS;IACnD;IArQAiE,YACE,AACQrB,YAA0B,EAClC,AACQ5B,SAAoC,EAC5C,AACQI,SAAoC,EAC5C,AACQ9B,SAAoC,EAC5C,AAAQW,cAA8B,CACtC;aARQ2C,eAAAA;aAEA5B,YAAAA;aAEAI,YAAAA;aAEA9B,YAAAA;aACAW,iBAAAA;IACP;AA4PL;AAvQa5B;IADZ6F,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,cAAM,EAACC,oBAAa;IAEpBC,aAAAA,IAAAA,yBAAgB,EAACC,uBAAa;IAE9BD,aAAAA,IAAAA,yBAAgB,EAACE,uBAAa;IAE9BF,aAAAA,IAAAA,yBAAgB,EAACG,uBAAa;;;eALT,mBAAY,4BAAZ,mBAAY;eAEf,oBAAU,4BAAV,oBAAU;eAEV,oBAAU,4BAAV,oBAAU;eAEV,oBAAU,4BAAV,oBAAU;eACL,sBAAc,4BAAd,sBAAc;;GAV7BnG"}