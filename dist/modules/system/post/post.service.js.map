{"version":3,"sources":["../../../../src/modules/system/post/post.service.ts"],"sourcesContent":["import { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { EXCEL_SERVICE, ExcelService } from '@/shared/excel';\nimport { In, Repository } from 'typeorm';\n\nimport { MESSAGES } from '@/constants';\nimport { SysPostEntity } from '@/database';\nimport { DelDTO } from '@/models';\nimport { ContextService } from '@/shared';\n\nimport { CreatePostDTO, FindPostPageDTO, UpdatePostDTO } from './post.dto';\nimport { PostExportSerialize } from './post.serialize';\n\n@Injectable()\nexport class PostService {\n  constructor(\n    @Inject(EXCEL_SERVICE)\n    private excelService: ExcelService,\n    @InjectRepository(SysPostEntity)\n    private postModel: Repository<SysPostEntity>,\n    private contextService: ContextService,\n  ) {}\n\n  async handleCreate(dto: CreatePostDTO) {\n    const { userName } = this.contextService.getPayload();\n\n    await this.postModel.insert({ ...dto, createBy: userName });\n  }\n\n  async handleUpdate(id: string, dto: UpdatePostDTO) {\n    const { userName } = this.contextService.getPayload();\n\n    const existPost = await this.postModel.findOneBy({ id });\n\n    if (!existPost) {\n      throw new BadRequestException(MESSAGES.POST_NOT_EXIST);\n    }\n\n    await this.postModel.update(id, { ...dto, updateBy: userName });\n  }\n\n  async handleFindPage(dto: FindPostPageDTO) {\n    const { pageNum, pageSize, ...rest } = dto;\n\n    const [list, total] = await this.postModel.findAndCount({\n      where: {\n        ...rest,\n      },\n      order: {\n        postSort: 'ASC',\n      },\n      take: pageSize,\n      skip: (pageNum - 1) * pageSize,\n    });\n\n    return {\n      pageNum,\n      pageSize,\n      total,\n      list,\n    };\n  }\n\n  async handleDeleteMany(dto: DelDTO) {\n    const { ids } = dto;\n\n    const list = await this.postModel.find({\n      relations: { users: true },\n      where: { id: In(ids) },\n    });\n\n    for (const post of list) {\n      await this.postModel.update(post.id, { users: [] });\n    }\n\n    await this.postModel.delete(ids);\n  }\n\n  async handleExportPage(dto: FindPostPageDTO) {\n    const { list } = await this.handleFindPage(dto);\n\n    return await this.excelService.handleExport({\n      sheetName: '岗位',\n      fileName: '岗位报表',\n      Cls: PostExportSerialize,\n      data: list,\n    });\n  }\n}\n"],"names":["PostService","handleCreate","dto","userName","contextService","getPayload","postModel","insert","createBy","handleUpdate","id","existPost","findOneBy","BadRequestException","MESSAGES","POST_NOT_EXIST","update","updateBy","handleFindPage","pageNum","pageSize","rest","list","total","findAndCount","where","order","postSort","take","skip","handleDeleteMany","ids","find","relations","users","In","post","delete","handleExportPage","excelService","handleExport","sheetName","fileName","Cls","PostExportSerialize","data","constructor","Injectable","Inject","EXCEL_SERVICE","InjectRepository","SysPostEntity"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAcaA;;;eAAAA;;;wBAd2C;yBACvB;uBACW;0BACb;2BAEN;0BACK;wBAEC;+BAGK;;;;;;;;;;;;;;;AAG7B,IAAA,AAAMA,cAAN,MAAMA;IASX,MAAMC,aAAaC,GAAkB,EAAE;QACrC,MAAM,EAAEC,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAM,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC;YAAE,GAAGL,GAAG;YAAEM,UAAUL;QAAS;IAC3D;IAEA,MAAMM,aAAaC,EAAU,EAAER,GAAkB,EAAE;QACjD,MAAM,EAAEC,QAAQ,EAAE,GAAG,IAAI,CAACC,cAAc,CAACC,UAAU;QAEnD,MAAMM,YAAY,MAAM,IAAI,CAACL,SAAS,CAACM,SAAS,CAAC;YAAEF;QAAG;QAEtD,IAAI,CAACC,WAAW;YACd,MAAM,IAAIE,2BAAmB,CAACC,mBAAQ,CAACC,cAAc;QACvD;QAEA,MAAM,IAAI,CAACT,SAAS,CAACU,MAAM,CAACN,IAAI;YAAE,GAAGR,GAAG;YAAEe,UAAUd;QAAS;IAC/D;IAEA,MAAMe,eAAehB,GAAoB,EAAE;QACzC,MAAM,EAAEiB,OAAO,EAAEC,QAAQ,EAAE,GAAGC,MAAM,GAAGnB;QAEvC,MAAM,CAACoB,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACjB,SAAS,CAACkB,YAAY,CAAC;YACtDC,OAAO;gBACL,GAAGJ,IAAI;YACT;YACAK,OAAO;gBACLC,UAAU;YACZ;YACAC,MAAMR;YACNS,MAAM,AAACV,CAAAA,UAAU,CAAA,IAAKC;QACxB;QAEA,OAAO;YACLD;YACAC;YACAG;YACAD;QACF;IACF;IAEA,MAAMQ,iBAAiB5B,GAAW,EAAE;QAClC,MAAM,EAAE6B,GAAG,EAAE,GAAG7B;QAEhB,MAAMoB,OAAO,MAAM,IAAI,CAAChB,SAAS,CAAC0B,IAAI,CAAC;YACrCC,WAAW;gBAAEC,OAAO;YAAK;YACzBT,OAAO;gBAAEf,IAAIyB,IAAAA,YAAE,EAACJ;YAAK;QACvB;QAEA,KAAK,MAAMK,QAAQd,KAAM;YACvB,MAAM,IAAI,CAAChB,SAAS,CAACU,MAAM,CAACoB,KAAK1B,EAAE,EAAE;gBAAEwB,OAAO,EAAE;YAAC;QACnD;QAEA,MAAM,IAAI,CAAC5B,SAAS,CAAC+B,MAAM,CAACN;IAC9B;IAEA,MAAMO,iBAAiBpC,GAAoB,EAAE;QAC3C,MAAM,EAAEoB,IAAI,EAAE,GAAG,MAAM,IAAI,CAACJ,cAAc,CAAChB;QAE3C,OAAO,MAAM,IAAI,CAACqC,YAAY,CAACC,YAAY,CAAC;YAC1CC,WAAW;YACXC,UAAU;YACVC,KAAKC,kCAAmB;YACxBC,MAAMvB;QACR;IACF;IAxEAwB,YACE,AACQP,YAA0B,EAClC,AACQjC,SAAoC,EAC5C,AAAQF,cAA8B,CACtC;aAJQmC,eAAAA;aAEAjC,YAAAA;aACAF,iBAAAA;IACP;AAmEL;AA1EaJ;IADZ+C,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,cAAM,EAACC,oBAAa;IAEpBC,aAAAA,IAAAA,yBAAgB,EAACC,uBAAa;;;eADT,mBAAY,4BAAZ,mBAAY;eAEf,oBAAU,4BAAV,oBAAU;eACL,sBAAc,4BAAd,sBAAc;;GAN7BnD"}