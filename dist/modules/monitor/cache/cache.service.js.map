{"version":3,"sources":["../../../../src/modules/monitor/cache/cache.service.ts"],"sourcesContent":["import { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { CACHES } from '@/constants';\nimport { ICacheManager, ICacheModel } from '@/interfaces';\n\nimport { createCacheModel } from './cache.util';\n\n@Injectable()\nexport class CacheService {\n  constructor(\n    @Inject(CACHE_MANAGER)\n    private cacheManager: ICacheManager,\n    private configService: ConfigService,\n  ) {}\n\n  async handleGetNames() {\n    const list = new Array<ICacheModel>();\n\n    list.push(\n      createCacheModel({\n        cacheName: CACHES.LOGIN_TOKEN_KEY,\n        remark: '会话信息',\n      }),\n      createCacheModel({\n        cacheName: CACHES.LOGIN_USER_KEY,\n        remark: '用户信息',\n      }),\n      createCacheModel({\n        cacheName: CACHES.SYS_CONFIG_KEY,\n        remark: '配置信息',\n      }),\n      createCacheModel({\n        cacheName: CACHES.SYS_DICT_KEY,\n        remark: '数据字典',\n      }),\n    );\n\n    return list;\n  }\n\n  async handleGetKeys(name: string) {\n    return await this.getKeys(name);\n  }\n\n  async handleClearName(name: string) {\n    const keys: string[] = await this.getKeys(name);\n\n    for (const key of keys) {\n      await this.cacheManager.del(key);\n    }\n  }\n\n  async handleGetValue(key: string) {\n    const cacheValue = await this.cacheManager.get<any>(key);\n\n    const [cacheName, cacheKey] = key.split(':');\n\n    return {\n      cacheName,\n      cacheKey,\n      cacheValue,\n    };\n  }\n\n  async handleClearKey(key: string) {\n    await this.cacheManager.del(key);\n  }\n\n  private async getKeys(name: string) {\n    const prefix = this.configService.get<string>('cache.keyPrefix') || '';\n    let keys = await this.cacheManager.store.keys(`${prefix}${name}:*`);\n\n    keys = keys.map((key) => key.replace(prefix, ''));\n\n    return keys;\n  }\n}\n"],"names":["CacheService","handleGetNames","list","Array","push","createCacheModel","cacheName","CACHES","LOGIN_TOKEN_KEY","remark","LOGIN_USER_KEY","SYS_CONFIG_KEY","SYS_DICT_KEY","handleGetKeys","name","getKeys","handleClearName","keys","key","cacheManager","del","handleGetValue","cacheValue","get","cacheKey","split","handleClearKey","prefix","configService","store","map","replace","constructor","Injectable","Inject","CACHE_MANAGER"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAUaA;;;eAAAA;;;8BAViB;wBACK;wBACL;2BAEP;4BACoB;2BAEV;;;;;;;;;;;;;;;AAG1B,IAAA,AAAMA,eAAN,MAAMA;IAOX,MAAMC,iBAAiB;QACrB,MAAMC,OAAO,IAAIC;QAEjBD,KAAKE,IAAI,CACPC,IAAAA,2BAAgB,EAAC;YACfC,WAAWC,iBAAM,CAACC,eAAe;YACjCC,QAAQ;QACV,IACAJ,IAAAA,2BAAgB,EAAC;YACfC,WAAWC,iBAAM,CAACG,cAAc;YAChCD,QAAQ;QACV,IACAJ,IAAAA,2BAAgB,EAAC;YACfC,WAAWC,iBAAM,CAACI,cAAc;YAChCF,QAAQ;QACV,IACAJ,IAAAA,2BAAgB,EAAC;YACfC,WAAWC,iBAAM,CAACK,YAAY;YAC9BH,QAAQ;QACV;QAGF,OAAOP;IACT;IAEA,MAAMW,cAAcC,IAAY,EAAE;QAChC,OAAO,MAAM,IAAI,CAACC,OAAO,CAACD;IAC5B;IAEA,MAAME,gBAAgBF,IAAY,EAAE;QAClC,MAAMG,OAAiB,MAAM,IAAI,CAACF,OAAO,CAACD;QAE1C,KAAK,MAAMI,OAAOD,KAAM;YACtB,MAAM,IAAI,CAACE,YAAY,CAACC,GAAG,CAACF;QAC9B;IACF;IAEA,MAAMG,eAAeH,GAAW,EAAE;QAChC,MAAMI,aAAa,MAAM,IAAI,CAACH,YAAY,CAACI,GAAG,CAAML;QAEpD,MAAM,CAACZ,WAAWkB,SAAS,GAAGN,IAAIO,KAAK,CAAC;QAExC,OAAO;YACLnB;YACAkB;YACAF;QACF;IACF;IAEA,MAAMI,eAAeR,GAAW,EAAE;QAChC,MAAM,IAAI,CAACC,YAAY,CAACC,GAAG,CAACF;IAC9B;IAEA,MAAcH,QAAQD,IAAY,EAAE;QAClC,MAAMa,SAAS,IAAI,CAACC,aAAa,CAACL,GAAG,CAAS,sBAAsB;QACpE,IAAIN,OAAO,MAAM,IAAI,CAACE,YAAY,CAACU,KAAK,CAACZ,IAAI,CAAC,CAAC,EAAEU,OAAO,EAAEb,KAAK,EAAE,CAAC;QAElEG,OAAOA,KAAKa,GAAG,CAAC,CAACZ,MAAQA,IAAIa,OAAO,CAACJ,QAAQ;QAE7C,OAAOV;IACT;IAlEAe,YACE,AACQb,YAA2B,EACnC,AAAQS,aAA4B,CACpC;aAFQT,eAAAA;aACAS,gBAAAA;IACP;AA+DL;AApEa5B;IADZiC,IAAAA,kBAAU;IAGNC,aAAAA,IAAAA,cAAM,EAACC,2BAAa;;;eACC,yBAAa,4BAAb,yBAAa;eACZ,qBAAa,4BAAb,qBAAa;;GAJ3BnC"}