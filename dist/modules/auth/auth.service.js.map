{"version":3,"sources":["../../../src/modules/auth/auth.service.ts"],"sourcesContent":["import { InjectQueue } from '@nestjs/bull';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { BadRequestException, Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Queue } from 'bull';\nimport { Repository } from 'typeorm';\n\nimport { CaptchaService } from '@/shared/captcha';\nimport {\n  QUEUES,\n  ENTITY_DEL_FLAG,\n  ENTITY_LOGIN_STATUS,\n  MESSAGES,\n  CAPTCHA_SERVICE,\n} from '@/constants';\nimport { SysUserEntity } from '@/database';\nimport { ICacheManager, IOnlineInfo } from '@/interfaces';\nimport { ContextService, SharedService } from '@/shared';\nimport { CacheUtil, HashUtil, ProxyUtil, SysUtil } from '@/utils';\n\nimport { LoginDTO } from './auth.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(CACHE_MANAGER)\n    private cacheManager: ICacheManager,\n    @Inject(CAPTCHA_SERVICE)\n    private captchaService: CaptchaService,\n    @InjectRepository(SysUserEntity)\n    private userModel: Repository<SysUserEntity>,\n    @InjectQueue(QUEUES.LOGIN_LOG)\n    private loginLogQueue: Queue,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n    private contextService: ContextService,\n    private sharedService: SharedService,\n  ) {}\n\n  // #region 登录\n  async handleLogin(dto: LoginDTO) {\n    const { captchaId, captchaValue, userName, password } = dto;\n\n    const passed = await this.captchaService.check(captchaId, captchaValue);\n\n    if (!passed && !SysUtil.isTesting) {\n      throw new BadRequestException(MESSAGES.CAPTCHA_NOT_CORRECT);\n    }\n\n    const existUser = await this.userModel\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.dept', 'dept')\n      .select(['user', 'dept.id', 'dept.deptName'])\n      .addSelect('user.password')\n      .where({\n        userName,\n        delFlag: ENTITY_DEL_FLAG.EXIST,\n      })\n      .getOne();\n\n    if (!existUser) {\n      throw new BadRequestException(MESSAGES.USER_NOT_EXIST);\n    }\n\n    const isMatch = await HashUtil.compare(password, existUser.password);\n    const deptName = existUser.dept ? existUser.dept.deptName : '';\n    const loginDate = new Date();\n    const ip = this.contextService.getIP();\n    const userAgent = this.contextService.getUA();\n    const tokenId = ProxyUtil.generateID();\n    const userId = existUser.id;\n\n    //#region 保存登录日志\n\n    if (!isMatch) {\n      this.loginLogQueue.add({\n        userName,\n        status: ENTITY_LOGIN_STATUS.FAIL,\n        msg: MESSAGES.ACCOUNT_OR_PASSWORD_ERROR,\n        loginDate,\n        ip,\n        userAgent,\n      });\n\n      throw new BadRequestException(MESSAGES.ACCOUNT_OR_PASSWORD_ERROR);\n    }\n\n    const loginLogJob = await this.loginLogQueue.add({\n      userName,\n      status: ENTITY_LOGIN_STATUS.SUCCESS,\n      msg: MESSAGES.LOGIN_SUCCESS,\n      loginDate,\n      ip,\n      userAgent,\n    });\n\n    const jobRes = await loginLogJob.finished();\n\n    //#endregion\n\n    await this.userModel.update(userId, {\n      loginDate,\n      loginIp: jobRes.loginIp,\n    });\n\n    //#region 缓存Token\n\n    const isSoloLogin = await this.sharedService.isSoloLogin();\n\n    const ttl = this.configService.get<number>('jwt.signOptions.expiresIn');\n\n    if (isSoloLogin) {\n      const userKey = CacheUtil.getUserKey(userId);\n\n      const oldTokenId = await this.cacheManager.get<string>(userKey);\n\n      if (oldTokenId) {\n        await this.cacheManager.del(CacheUtil.getTokenKey(oldTokenId));\n      }\n\n      await this.cacheManager.set(userKey, tokenId, ttl);\n    }\n\n    await this.cacheManager.set(\n      CacheUtil.getTokenKey(tokenId),\n      {\n        tokenId,\n        userId,\n        userName,\n        deptName,\n        loginDate,\n        ...jobRes,\n      },\n      ttl,\n    );\n\n    //#endregion\n\n    return this.jwtService.sign({ userName, userId, sub: tokenId });\n  }\n  // #endregion 登录\n\n  // #region 退出登录\n  async handleLogout() {\n    const isSoloLogin = await this.sharedService.isSoloLogin();\n\n    const payload = this.contextService.getPayload();\n\n    // 判断 token 是否已过期\n    if (payload) {\n      const tokenKey = CacheUtil.getTokenKey(payload.sub);\n\n      // 判断是否启用单客户端登录\n      if (isSoloLogin) {\n        const { userId } = await this.cacheManager.get<IOnlineInfo>(tokenKey);\n\n        const userKey = CacheUtil.getUserKey(userId);\n\n        await this.cacheManager.del(userKey);\n      }\n\n      await this.cacheManager.del(tokenKey);\n    }\n  }\n  // #endregion 退出登录\n\n  // #region 获取验证码\n  async handleGetCaptcha() {\n    return await this.captchaService.image({\n      width: 90,\n      height: 40,\n      noise: 2,\n      size: 4,\n    });\n  }\n}\n"],"names":["AuthService","handleLogin","dto","captchaId","captchaValue","userName","password","passed","captchaService","check","SysUtil","isTesting","BadRequestException","MESSAGES","CAPTCHA_NOT_CORRECT","existUser","userModel","createQueryBuilder","leftJoinAndSelect","select","addSelect","where","delFlag","ENTITY_DEL_FLAG","EXIST","getOne","USER_NOT_EXIST","isMatch","HashUtil","compare","deptName","dept","loginDate","Date","ip","contextService","getIP","userAgent","getUA","tokenId","ProxyUtil","generateID","userId","id","loginLogQueue","add","status","ENTITY_LOGIN_STATUS","FAIL","msg","ACCOUNT_OR_PASSWORD_ERROR","loginLogJob","SUCCESS","LOGIN_SUCCESS","jobRes","finished","update","loginIp","isSoloLogin","sharedService","ttl","configService","get","userKey","CacheUtil","getUserKey","oldTokenId","cacheManager","del","getTokenKey","set","jwtService","sign","sub","handleLogout","payload","getPayload","tokenKey","handleGetCaptcha","image","width","height","noise","size","constructor","Injectable","Inject","CACHE_MANAGER","CAPTCHA_SERVICE","InjectRepository","SysUserEntity","InjectQueue","QUEUES","LOGIN_LOG"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}