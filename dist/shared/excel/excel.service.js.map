{"version":3,"sources":["../../../src/shared/excel/excel.service.ts"],"sourcesContent":["import { randomUUID } from 'node:crypto';\n\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { instanceToPlain } from 'class-transformer';\nimport ExcelJS from 'exceljs';\n\nimport { EXCEL_COLUMN_GROUP, EXCEL_COLUMN_METADATA } from '@/constants';\nimport {\n  ExcelCreateOptions,\n  ExcelExportOptions,\n  ExcelImportOptions,\n} from '@/interfaces';\n\nexport { ExcelJS };\n\n@Injectable()\nexport class ExcelService {\n  /**\n   * 处理生成\n   * @param {ExcelCreateOptions} options 生成参数\n   */\n  async handleCreate(options: ExcelCreateOptions) {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet(options.sheetName, options.addWorksheetOptions);\n\n    const columns = this.getColumns(options.Cls);\n\n    ws.columns = columns;\n\n    const buffer = await wb.xlsx.writeBuffer();\n\n    const headers = this.getHeaders(options.fileName);\n\n    return {\n      headers,\n      body: buffer,\n    };\n  }\n\n  /**\n   * 处理导出\n   * @param {ExcelExportOptions} options 导出参数\n   */\n  async handleExport(options: ExcelExportOptions) {\n    const wb = new ExcelJS.Workbook();\n    const ws = wb.addWorksheet(options.sheetName, options.addWorksheetOptions);\n\n    const columns = this.getColumns(options.Cls);\n    const rows = this.getRows(options.Cls, options.data);\n\n    ws.columns = columns;\n    ws.addRows(rows);\n\n    const buffer = await wb.xlsx.writeBuffer();\n\n    const headers = this.getHeaders(options.fileName);\n\n    return {\n      headers,\n      body: buffer,\n    };\n  }\n\n  /**\n   * 处理导入\n   * @param {ExcelImportOptions} options 导入参数\n   */\n  async handleImport(options: ExcelImportOptions) {\n    const wb = new ExcelJS.Workbook();\n\n    if (options.filePath) {\n      await wb.xlsx.readFile(options.filePath);\n    } else if (options.fileData) {\n      await wb.xlsx.load(options.fileData);\n    } else {\n      throw new BadRequestException('filePath or fileData must be required');\n    }\n\n    const ws = wb.getWorksheet(options.sheetName);\n    const length = ws.rowCount;\n    const rows = ws.getRows(2, length - 1)!;\n\n    const columns = this.getColumns(options.Cls);\n\n    ws.columns = columns;\n\n    const arr = [];\n\n    for (const row of rows) {\n      const obj = Object.create({});\n\n      for (const column of columns) {\n        obj[column.key] = row.getCell(column.key).value;\n      }\n\n      arr.push(obj);\n    }\n\n    return arr;\n  }\n\n  /**\n   * 获取表格列\n   * @param {any} Cls 序列化类\n   * @private\n   */\n  private getColumns(Cls: any) {\n    const columns = [];\n    const obj = instanceToPlain(new Cls({}), { groups: [EXCEL_COLUMN_GROUP] });\n\n    const keys = Object.keys(obj);\n\n    for (const key of keys) {\n      const result = Reflect.getMetadata(\n        EXCEL_COLUMN_METADATA,\n        Cls.prototype,\n        key,\n      );\n\n      if (result) {\n        columns.push({ key, ...result });\n      }\n    }\n\n    return columns;\n  }\n\n  /**\n   * 获取表格行\n   * @param {any} Cls 序列化类\n   * @param {any} data 数据\n   * @private\n   */\n  private getRows(Cls: any, data: any[]) {\n    return data.map((v) =>\n      instanceToPlain(new Cls(v), { groups: [EXCEL_COLUMN_GROUP] }),\n    );\n  }\n\n  /**\n   * 获取响应头\n   * @param {string} filename 文件名\n   * @private\n   */\n  private getHeaders(filename?: string) {\n    const name = filename ? encodeURIComponent(filename) : randomUUID();\n\n    return {\n      'content-type': 'application/vnd.openxmlformats;charset=utf-8',\n      'content-disposition': `attachment; filename=${name}.xlsx`,\n    };\n  }\n}\n"],"names":["ExcelJS","ExcelService","handleCreate","options","wb","Workbook","ws","addWorksheet","sheetName","addWorksheetOptions","columns","getColumns","Cls","buffer","xlsx","writeBuffer","headers","getHeaders","fileName","body","handleExport","rows","getRows","data","addRows","handleImport","filePath","readFile","fileData","load","BadRequestException","getWorksheet","length","rowCount","arr","row","obj","Object","create","column","key","getCell","value","push","instanceToPlain","groups","EXCEL_COLUMN_GROUP","keys","result","Reflect","getMetadata","EXCEL_COLUMN_METADATA","prototype","map","v","filename","name","encodeURIComponent","randomUUID","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}