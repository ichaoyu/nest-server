{"version":3,"sources":["../../../src/shared/captcha/captcha.service.ts"],"sourcesContent":["import { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { Cache } from 'cache-manager';\nimport svgBase64 from 'mini-svg-data-uri';\nimport { nanoid } from 'nanoid';\nimport svgCaptcha from 'svg-captcha';\n\nimport { CAPTCHA_MERGED_OPTIONS, letters, numbers } from '@/constants';\nimport {\n  CaptchaOptions,\n  FormulaCaptchaOptions,\n  ImageCaptchaOptions,\n  TextCaptchaOptions,\n} from '@/interfaces';\n\n@Injectable()\nexport class CaptchaService {\n  constructor(\n    @Inject(CACHE_MANAGER)\n    private cacheManager: Cache,\n    @Inject(CAPTCHA_MERGED_OPTIONS)\n    private options: CaptchaOptions,\n  ) {}\n\n  async image(options?: ImageCaptchaOptions): Promise<{\n    id: string;\n    imageBase64: string;\n  }> {\n    const { width, height, type, size, noise } = Object.assign(\n      {},\n      this.options,\n      this.options.default,\n      this.options.image,\n      options,\n    );\n    let ignoreChars = '';\n    switch (type) {\n      case 'letter':\n        ignoreChars = numbers;\n        break;\n      case 'number':\n        ignoreChars = letters;\n        break;\n    }\n    const { data, text } = svgCaptcha.create({\n      ignoreChars,\n      width,\n      height,\n      size,\n      noise,\n    });\n    const id = await this.set(text);\n    const imageBase64 = svgBase64(data);\n    return { id, imageBase64 };\n  }\n\n  async formula(options?: FormulaCaptchaOptions) {\n    const { width, height, noise } = Object.assign(\n      {},\n      this.options,\n      this.options.default,\n      this.options.formula,\n      options,\n    );\n    const { data, text } = svgCaptcha.createMathExpr({\n      width,\n      height,\n      noise,\n    });\n    const id = await this.set(text);\n    const imageBase64 = svgBase64(data);\n    return { id, imageBase64 };\n  }\n\n  async text(options?: TextCaptchaOptions): Promise<{\n    id: string;\n    text: string;\n  }> {\n    const textOptions = Object.assign(\n      {},\n      this.options,\n      this.options.default,\n      this.options.text,\n      options,\n    );\n    let chars = '';\n    switch (textOptions.type) {\n      case 'letter':\n        chars = letters;\n        break;\n      case 'number':\n        chars = numbers;\n        break;\n      default:\n        chars = letters + numbers;\n        break;\n    }\n    let text = '';\n    while (textOptions.size--) {\n      text += chars[Math.floor(Math.random() * chars.length)];\n    }\n    const id = await this.set(text);\n    return { id, text };\n  }\n\n  async set(text: string): Promise<string> {\n    const id = nanoid();\n    await this.cacheManager.set(\n      this.getStoreId(id),\n      (text || '').toLowerCase(),\n      this.options.expirationTime,\n    );\n    return id;\n  }\n\n  async check(id: string, value: string): Promise<boolean> {\n    if (!id || !value) {\n      return false;\n    }\n    const storeId = this.getStoreId(id);\n    const storedValue = await this.cacheManager.get(storeId);\n    if (value.toLowerCase() !== storedValue) {\n      return false;\n    }\n    this.cacheManager.del(storeId);\n    return true;\n  }\n\n  private getStoreId(id: string): string {\n    if (!this.options.idPrefix) {\n      return id;\n    }\n    return `${this.options.idPrefix}:${id}`;\n  }\n}\n"],"names":["CaptchaService","image","options","width","height","type","size","noise","Object","assign","default","ignoreChars","numbers","letters","data","text","svgCaptcha","create","id","set","imageBase64","svgBase64","formula","createMathExpr","textOptions","chars","Math","floor","random","length","nanoid","cacheManager","getStoreId","toLowerCase","expirationTime","check","value","storeId","storedValue","get","del","idPrefix","constructor","Injectable","Inject","CACHE_MANAGER","CAPTCHA_MERGED_OPTIONS"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}