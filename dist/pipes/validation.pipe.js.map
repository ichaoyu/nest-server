{"version":3,"sources":["../../src/pipes/validation.pipe.ts"],"sourcesContent":["import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { plainToInstance } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n/**\n * 参数校验管道\n */\n@Injectable()\nexport class ValidationPipe implements PipeTransform<any> {\n  async transform(value: any, { metatype }: ArgumentMetadata) {\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToInstance(metatype, value);\n    const errors = await validate(object, { stopAtFirstError: true });\n    if (errors.length > 0) {\n      const errorMsg = Object.values(errors[0].constraints)[0];\n      throw new UnprocessableEntityException(errorMsg);\n    }\n    return value;\n  }\n\n  private toValidate(metatype: any): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n}\n"],"names":["ValidationPipe","transform","value","metatype","toValidate","object","plainToInstance","errors","validate","stopAtFirstError","length","errorMsg","Object","values","constraints","UnprocessableEntityException","types","String","Boolean","Number","Array","includes","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAaaA;;;eAAAA;;;wBARN;kCACyB;gCACP;;;;;;;AAMlB,IAAA,AAAMA,iBAAN,MAAMA;IACX,MAAMC,UAAUC,KAAU,EAAE,EAAEC,QAAQ,EAAoB,EAAE;QAC1D,IAAI,CAACA,YAAY,CAAC,IAAI,CAACC,UAAU,CAACD,WAAW;YAC3C,OAAOD;QACT;QACA,MAAMG,SAASC,IAAAA,iCAAe,EAACH,UAAUD;QACzC,MAAMK,SAAS,MAAMC,IAAAA,wBAAQ,EAACH,QAAQ;YAAEI,kBAAkB;QAAK;QAC/D,IAAIF,OAAOG,MAAM,GAAG,GAAG;YACrB,MAAMC,WAAWC,OAAOC,MAAM,CAACN,MAAM,CAAC,EAAE,CAACO,WAAW,CAAC,CAAC,EAAE;YACxD,MAAM,IAAIC,oCAA4B,CAACJ;QACzC;QACA,OAAOT;IACT;IAEQE,WAAWD,QAAa,EAAW;QACzC,MAAMa,QAAQ;YAACC;YAAQC;YAASC;YAAQC;YAAOR;SAAO;QACtD,OAAO,CAACI,MAAMK,QAAQ,CAAClB;IACzB;AACF;AAlBaH;IADZsB,IAAAA,kBAAU;GACEtB"}