{"version":3,"sources":["../../src/interceptors/cache.interceptor.ts"],"sourcesContent":["import { CACHE_KEY_METADATA, CacheInterceptor } from '@nestjs/cache-manager';\nimport { ExecutionContext, Injectable } from '@nestjs/common';\n\nimport { CACHES } from '@/constants';\nimport { IRequest } from '@/interfaces';\nimport { CacheUtil } from '@/utils';\n\n/**\n * 缓存键名拦截器\n */\n@Injectable()\nexport class CacheKeyInterceptor extends CacheInterceptor {\n  trackBy(context: ExecutionContext) {\n    const request = context.switchToHttp().getRequest<IRequest>();\n    const cacheKey = this.reflector.get<string>(\n      CACHE_KEY_METADATA,\n      context.getHandler(),\n    );\n\n    if (!cacheKey) {\n      return '';\n    }\n\n    if (cacheKey === CACHES.SYS_CONFIG_KEY) {\n      // @ts-ignore\n      return CacheUtil.getConfigKey(request.query.key);\n    }\n\n    if (cacheKey === CACHES.SYS_DICT_KEY) {\n      // @ts-ignore\n      return CacheUtil.getDictKey(request.query.dictType);\n    }\n\n    return cacheKey;\n  }\n}\n"],"names":["CacheKeyInterceptor","CacheInterceptor","trackBy","context","request","switchToHttp","getRequest","cacheKey","reflector","get","CACHE_KEY_METADATA","getHandler","CACHES","SYS_CONFIG_KEY","CacheUtil","getConfigKey","query","key","SYS_DICT_KEY","getDictKey","dictType","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAWaA;;;eAAAA;;;8BAXwC;wBACR;2BAEtB;uBAEG;;;;;;;AAMnB,IAAA,AAAMA,sBAAN,MAAMA,4BAA4BC,8BAAgB;IACvDC,QAAQC,OAAyB,EAAE;QACjC,MAAMC,UAAUD,QAAQE,YAAY,GAAGC,UAAU;QACjD,MAAMC,WAAW,IAAI,CAACC,SAAS,CAACC,GAAG,CACjCC,gCAAkB,EAClBP,QAAQQ,UAAU;QAGpB,IAAI,CAACJ,UAAU;YACb,OAAO;QACT;QAEA,IAAIA,aAAaK,iBAAM,CAACC,cAAc,EAAE;YACtC,aAAa;YACb,OAAOC,gBAAS,CAACC,YAAY,CAACX,QAAQY,KAAK,CAACC,GAAG;QACjD;QAEA,IAAIV,aAAaK,iBAAM,CAACM,YAAY,EAAE;YACpC,aAAa;YACb,OAAOJ,gBAAS,CAACK,UAAU,CAACf,QAAQY,KAAK,CAACI,QAAQ;QACpD;QAEA,OAAOb;IACT;AACF;AAxBaP;IADZqB,IAAAA,kBAAU;GACErB"}