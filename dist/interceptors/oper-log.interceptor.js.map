{"version":3,"sources":["../../src/interceptors/oper-log.interceptor.ts"],"sourcesContent":["import { InjectQueue } from '@nestjs/bull';\nimport {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n  Scope,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { Queue } from 'bull';\nimport { pick } from 'lodash-unified';\nimport { catchError, tap, throwError } from 'rxjs';\n\nimport { ENTITY_BIZ_STATUS, ENTITY_BIZ_TYPE, QUEUES } from '@/constants';\nimport { OperLog } from '@/decorators';\nimport { IRequest } from '@/interfaces';\n\n/**\n * 操作日志拦截器\n */\n@Injectable({\n  scope: Scope.REQUEST,\n})\nexport class OperLogInterceptor implements NestInterceptor {\n  constructor(\n    @InjectQueue(QUEUES.OPER_LOG)\n    private operLogQueue: Queue,\n    private configService: ConfigService,\n    private reflector: Reflector,\n  ) {}\n\n  async intercept(context: ExecutionContext, next: CallHandler<any>) {\n    const request = context.switchToHttp().getRequest<IRequest>();\n    const apiPath = this.configService.get<string>('app.apiPath');\n    const isApi = request.url.includes(apiPath);\n\n    // 非接口请求直接跳过\n    if (!isApi) {\n      return next.handle();\n    }\n\n    const operLog = this.reflector.get(OperLog, context.getHandler());\n\n    // 没有操作日志注解直接跳过\n    if (!operLog) {\n      return next.handle();\n    }\n\n    const { title, bizType } = operLog;\n    const method = `${context.getClass().name}.${context.getHandler().name}`;\n\n    const logData = {\n      title,\n      bizType,\n      method,\n      requestMethod: request.method,\n      requestUrl: request.url,\n      requestParams:\n        // 导入业务参数不赋值\n        bizType !== ENTITY_BIZ_TYPE.IMPORT\n          ? JSON.stringify(pick(request, ['params', 'query', 'body']))\n          : null,\n      ip: request.ip,\n      operName: request.payload.userName,\n      operTime: Date.now(),\n    };\n\n    return next.handle().pipe(\n      tap(async (data) => {\n        const { operTime, ...rest } = logData;\n        const costTime = Date.now() - operTime;\n\n        this.operLogQueue.add({\n          ...rest,\n          requestResult:\n            // 导出业务结果不赋值\n            logData.bizType !== ENTITY_BIZ_TYPE.EXPORT\n              ? JSON.stringify(data)\n              : null,\n          status: ENTITY_BIZ_STATUS.SUCCESS,\n          operTime: new Date(operTime),\n          costTime,\n        });\n      }),\n      catchError((err) => {\n        const { operTime, ...rest } = logData;\n        const costTime = Date.now() - operTime;\n\n        this.operLogQueue.add({\n          ...rest,\n          status: ENTITY_BIZ_STATUS.FAIL,\n          errorMsg: err.message,\n          operTime: new Date(operTime),\n          costTime,\n        });\n\n        return throwError(() => err);\n      }),\n    );\n  }\n}\n"],"names":["OperLogInterceptor","intercept","context","next","request","switchToHttp","getRequest","apiPath","configService","get","isApi","url","includes","handle","operLog","reflector","OperLog","getHandler","title","bizType","method","getClass","name","logData","requestMethod","requestUrl","requestParams","ENTITY_BIZ_TYPE","IMPORT","JSON","stringify","pick","ip","operName","payload","userName","operTime","Date","now","pipe","tap","data","rest","costTime","operLogQueue","add","requestResult","EXPORT","status","ENTITY_BIZ_STATUS","SUCCESS","catchError","err","FAIL","errorMsg","message","throwError","constructor","Injectable","scope","Scope","REQUEST","InjectQueue","QUEUES","OPER_LOG"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAwBaA;;;eAAAA;;;sBAxBe;wBAOrB;wBACuB;sBACJ;uBACJ;+BACD;sBACuB;2BAEe;4BACnC;;;;;;;;;;;;;;;AASjB,IAAA,AAAMA,qBAAN,MAAMA;IAQX,MAAMC,UAAUC,OAAyB,EAAEC,IAAsB,EAAE;QACjE,MAAMC,UAAUF,QAAQG,YAAY,GAAGC,UAAU;QACjD,MAAMC,UAAU,IAAI,CAACC,aAAa,CAACC,GAAG,CAAS;QAC/C,MAAMC,QAAQN,QAAQO,GAAG,CAACC,QAAQ,CAACL;QAEnC,YAAY;QACZ,IAAI,CAACG,OAAO;YACV,OAAOP,KAAKU,MAAM;QACpB;QAEA,MAAMC,UAAU,IAAI,CAACC,SAAS,CAACN,GAAG,CAACO,mBAAO,EAAEd,QAAQe,UAAU;QAE9D,eAAe;QACf,IAAI,CAACH,SAAS;YACZ,OAAOX,KAAKU,MAAM;QACpB;QAEA,MAAM,EAAEK,KAAK,EAAEC,OAAO,EAAE,GAAGL;QAC3B,MAAMM,SAAS,CAAC,EAAElB,QAAQmB,QAAQ,GAAGC,IAAI,CAAC,CAAC,EAAEpB,QAAQe,UAAU,GAAGK,IAAI,CAAC,CAAC;QAExE,MAAMC,UAAU;YACdL;YACAC;YACAC;YACAI,eAAepB,QAAQgB,MAAM;YAC7BK,YAAYrB,QAAQO,GAAG;YACvBe,eACE,YAAY;YACZP,YAAYQ,0BAAe,CAACC,MAAM,GAC9BC,KAAKC,SAAS,CAACC,IAAAA,mBAAI,EAAC3B,SAAS;gBAAC;gBAAU;gBAAS;aAAO,KACxD;YACN4B,IAAI5B,QAAQ4B,EAAE;YACdC,UAAU7B,QAAQ8B,OAAO,CAACC,QAAQ;YAClCC,UAAUC,KAAKC,GAAG;QACpB;QAEA,OAAOnC,KAAKU,MAAM,GAAG0B,IAAI,CACvBC,IAAAA,SAAG,EAAC,OAAOC;YACT,MAAM,EAAEL,QAAQ,EAAE,GAAGM,MAAM,GAAGnB;YAC9B,MAAMoB,WAAWN,KAAKC,GAAG,KAAKF;YAE9B,IAAI,CAACQ,YAAY,CAACC,GAAG,CAAC;gBACpB,GAAGH,IAAI;gBACPI,eACE,YAAY;gBACZvB,QAAQJ,OAAO,KAAKQ,0BAAe,CAACoB,MAAM,GACtClB,KAAKC,SAAS,CAACW,QACf;gBACNO,QAAQC,4BAAiB,CAACC,OAAO;gBACjCd,UAAU,IAAIC,KAAKD;gBACnBO;YACF;QACF,IACAQ,IAAAA,gBAAU,EAAC,CAACC;YACV,MAAM,EAAEhB,QAAQ,EAAE,GAAGM,MAAM,GAAGnB;YAC9B,MAAMoB,WAAWN,KAAKC,GAAG,KAAKF;YAE9B,IAAI,CAACQ,YAAY,CAACC,GAAG,CAAC;gBACpB,GAAGH,IAAI;gBACPM,QAAQC,4BAAiB,CAACI,IAAI;gBAC9BC,UAAUF,IAAIG,OAAO;gBACrBnB,UAAU,IAAIC,KAAKD;gBACnBO;YACF;YAEA,OAAOa,IAAAA,gBAAU,EAAC,IAAMJ;QAC1B;IAEJ;IA3EAK,YACE,AACQb,YAAmB,EAC3B,AAAQpC,aAA4B,EACpC,AAAQO,SAAoB,CAC5B;aAHQ6B,eAAAA;aACApC,gBAAAA;aACAO,YAAAA;IACP;AAuEL;AA7Eaf;IAHZ0D,IAAAA,kBAAU,EAAC;QACVC,OAAOC,aAAK,CAACC,OAAO;IACtB;IAGKC,aAAAA,IAAAA,iBAAW,EAACC,iBAAM,CAACC,QAAQ;;;eACN,YAAK,4BAAL,YAAK;eACJ,qBAAa,4BAAb,qBAAa;eACjB,eAAS,4BAAT,eAAS;;GALnBhE"}